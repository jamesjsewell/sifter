{"version":3,"file":"compiled.js","sources":["states/GameMenu.js","states/Game.js","states/GameOver.js","states/Credits.js","states/Options.js","states/Boot.js","index.js"],"sourcesContent":["class GameMenu extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.width = this.theGame._width\n        this.height = this.theGame._height\n    \n    }\n\n    create() {\n\n        this.theGame.add.sprite(0, 0, 'menu_bg')\n        this.button = this.theGame.add.button(this.width/2, this.height/2, \"menu_start_button\", this.startGame, this, 1, 0, 2);\n        this.button.x = this.width/2 - (this.button.texture.frame.width/2) \n        this.button.y = this.height/2 - (this.button.texture.frame.height/2) \n\n    }\n\n    update() {\n       \n        \n    }\n\n    render(){\n       \n    }\n\n    startGame(){\n        \n        this.theGame.state.start(\"Game\");\n        \n    }\n \n}\n\nexport default GameMenu","\n\n\nclass Game extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.w = this.theGame.width\n        this.h = this.theGame.height\n        this.selectedTilesArray = []\n        this.selected = false\n    \n    }\n\n    preload() {\n\n        \n    }\n\n    create() {\n\n        this.theTileMap = this.theGame.add.tilemap('testing')\n        this.theTileMap.addTilesetImage('tiles');\n        this.layer1 = this.theTileMap.createLayer('base_layer')\n\n        this.theGame.input.onDown.add(this.getTileProperties, this);\n\n        this.theTileMap.forEach((tile)=>{\n            \n            \n            if(tile.x === 0 || tile.x === 7 || tile.y === 0 || tile.y === 7){\n                if(tile.properties){\n                    tile.properties['isBorder'] = true\n                    console.log(tile)\n                }\n                \n            }\n            \n        \n        \n        \n        \n        }, this, 0, 0, 8, 8,0)\n\n        console.log(this.theTileMap)\n    \n\n    }\n\n    update() {\n       \n        \n    }\n\n    render(){\n       \n    }\n\n    getTileProperties() {\n\n        var x = this.layer1.getTileX(this.theGame.input.activePointer.worldX);\n        var y = this.layer1.getTileY(this.theGame.input.activePointer.worldY);\n        var tile = this.theTileMap.getTile(x, y, this.layer1);\n\n        if(!this.selectedTilesArray.length && tile && !tile.properties.isBorder){\n            \n            this.selectedTilesArray[0] = tile\n            this.selected = true\n            return\n        }\n\n        if(this.selected === true && !tile.properties.isBorder){\n            if(!tile){\n                console.log('drop selection')\n            }\n\n            if(tile){\n                this.selectedTilesArray[1] = tile\n                \n                this.swap()\n            }\n        }\n        \n    \n    }\n\n    swap(){\n        var tile1 = this.selectedTilesArray[0]\n        var tile1Copy = new Phaser.Tile\n        \n        var tile2 = this.selectedTilesArray[1] \n        var tile2Copy = new Phaser.Tile\n\n        for (var prop in tile2) {\n            if (tile2.hasOwnProperty(prop)) {\n                tile2Copy[prop] = tile2[prop];\n            }\n        }\n\n        for (var prop in tile1) {\n            if (tile1.hasOwnProperty(prop)) {\n                tile1Copy[prop] = tile1[prop];\n            }\n        }\n       \n        this.theTileMap.putTile(tile1, tile2Copy.x, tile2Copy.y)\n        this.theTileMap.putTile(tile2Copy, tile1Copy.x, tile1Copy.y)\n        this.selectedTilesArray = []\n        this.selected = false\n        \n        \n       \n    }\n\n    \n\n \n}\n\nexport default Game","class GameOver extends Phaser.State {\n\n    init() {\n        \n    \n    }\n\n    preload() {\n\n        \n    }\n\n    create() {\n\n\n    }\n\n    update() {\n       \n        \n    }\n\n    render(){\n       \n    }\n \n}\n\nexport default GameOver","class Credits extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.score = 0\n    \n    }\n\n    preload() {\n\n    }\n\n    create() {\n        \n        this.cursors = this.theGame.input.keyboard.createCursorKeys();\n        \n        //  We're going to be using physics, so enable the Arcade Physics system\n        this.theGame.physics.startSystem(Phaser.Physics.ARCADE);\n        //  A simple background for our this.theGame\n        this.theGame.add.sprite(0, 0, 'sky');\n        //  The platforms group contains the ground and the 2 ledges we can jump on\n        this.platforms = this.theGame.add.group();\n        //  We will enable physics for any object that is created in group\n        this.platforms.enableBody = true;\n        // Here we create the ground.\n        this.ground = this.platforms.create(0, this.theGame.world.height - 64, 'ground');\n        //  Scale it to fit the width of the this.theGame (the original sprite is 400x32 in size)\n        this.ground.scale.setTo(2, 2);\n        //  This stops it from falling away when you jump on it\n        this.ground.body.immovable = true;\n        //  Now let's create two ledges\n        this.ledge = this.platforms.create(400, 480, 'ground');\n        this.ledge.body.immovable = true;\n        this.ledge = this.platforms.create(-100, 440, 'ground');\n        this.ledge.body.immovable = true;\n        this.ledge = this.platforms.create(200, 400, 'ground');\n        this.ledge.scale.setTo(.2,.5)\n        this.ledge.body.immovable = true;\n        // ready player one\n        // The player and its settings\n        this.player = this.theGame.add.sprite(32, this.theGame.world.height - 150, 'dude');\n        //  We need to enable physics on the player\n        this.theGame.physics.arcade.enable(this.player);\n        //  Player physics properties. Give the little guy a slight bounce.\n        this.player.body.bounce.y = 0.2;\n        this.player.body.gravity.y = 900;\n        this.player.body.collideWorldBounds = true;\n        //  Our two animations, walking left and right.\n        this.player.animations.add('left', [0, 1, 2, 3], 10, true);\n        this.player.animations.add('right', [5, 6, 7, 8], 10, true);\n        //add some stars\n        this.stars = this.theGame.add.group();\n        this.stars.enableBody = true;\n\n        //  Here we'll create 12 of them evenly spaced apart\n        for (var i = 0; i < 12; i++)\n        {\n            //  Create a star inside of the 'stars' group\n            var star = this.stars.create(i * 70, 0, 'star');\n            //  Let gravity do its thing\n            star.body.gravity.y = 900;\n            //  This just gives each star a slightly random bounce value\n            star.body.bounce.y = 0.7 + Math.random() * 0.2;\n        }\n        //gui\n        this.scoreText = this.theGame.add.text(650, 0, \"score: 0\", { font: \"18px Arial\", fill: \"#ffffff\", align: \"right\" });\n        this.scoreText.fixedToCamera = true;\n        this.scoreText.cameraOffset.setTo(650, 0);\n        \n\n        //move sprite to cursor\n        this.seeker = this.theGame.add.sprite(400, 300, '../assets/images/diamond.png');\n        this.seeker.anchor.setTo(0.5, 0.5);\n\n        //  Enable Arcade Physics for the sprite\n        this.theGame.physics.enable(this.seeker, Phaser.Physics.ARCADE);\n\n        //  Tell it we don't want physics to manage the rotation\n        this.seeker.body.allowRotation = false;\n\n        //pause menu\n        this.pause_menu()\n\n    }\n\n    update() {\n        this.theGame.world.setBounds(0, 0, 1920, 1920);\n        //  Notice that the sprite doesn't have any momentum at all,\n        //  it's all just set by the camera follow type.\n        //  0.1 is the amount of linear interpolation to use.\n        //  The smaller the value, the smooth the camera (and the longer it takes to catch up)\n        this.theGame.camera.follow(this.player, Phaser.Camera.FOLLOW_LOCKON, 0.1, 0.1);\n        //  Collide the player and the stars with the this.platforms\n        var hitPlatform = this.theGame.physics.arcade.collide(this.player, this.platforms);\n        //  Reset the players velocity (movement)\n        this.player.body.velocity.x = 0;\n        if (this.cursors.left.isDown)\n        {\n            //  Move to the left\n            this.player.body.velocity.x = -150;\n            this.player.animations.play('left');\n        }\n        else if (this.cursors.right.isDown)\n        {\n            //  Move to the right\n            this.player.body.velocity.x = 150;\n            this.player.animations.play('right');\n        }\n        else\n        {\n            //  Stand still\n            this.player.animations.stop();\n            this.player.frame = 4;\n        }\n        //  Allow the player to jump if they are touching the ground.\n        if (this.cursors.up.isDown && this.player.body.touching.down && hitPlatform)\n        {\n            this.player.body.velocity.y = -350;\n        }\n        //stars\n        this.theGame.physics.arcade.collide(this.stars, this.platforms);\n        this.theGame.physics.arcade.overlap(this.player, this.stars, this.collectStar, null, this);\n\n        //seeker\n        this.seeker.rotation = this.theGame.physics.arcade.moveToPointer(this.seeker, 60, this.theGame.input.activePointer, 500);\n        \n    }\n\n    render(){\n        var debug = this.theGame.debug;\n        debug.scale(20, 20, '#fff');\n        debug.phaser(10, 580);\n    }\n\n    pause_menu(){\n\n        //pause menu\n        var w = 800, h = 600;\n        \n        add_pause_button(this)\n\n        console.log(this.theGame)\n\n        var self = this\n\n        function paused(){\n\n            // When the paus button is pressed, we pause the this.theGame\n            self.theGame.paused = true;\n            self.pause_button.destroy();\n            // Then add the menu\n            self.menu = self.theGame.add.sprite(w/2, h/2, 'menu');\n            var xPos = self.theGame.camera.x\n            var yPos = self.theGame.camera.y\n\n            // And a label to illustrate which menu item was chosen. (self is not necessary)\n            self.choiceLabel = self.theGame.add.text(w/2, h-150, 'Click outside menu to continue', { font: '30px Arial', fill: '#fff' });\n            self.menu.x = xPos + w/2 - ( 270/2 )\n            self.menu.y = yPos + h/2 - ( 180/2 )\n\n            self.menu.x = self.theGame.camera.x + w/2 - ( 270/2 )\n            self.menu.y = self.theGame.camera.y + h/2 - ( 180/2 )\n\n            self.choiceLabel.x = self.menu.x \n            self.choiceLabel.y = self.menu.y + h/3.5\n\n            self.resume_button = self.theGame.add.button(self.theGame.world.centerX, self.theGame.world.centerY, 'resumeButton', unpause, self, 1, 0, 2);\n            self.resume_button.x = xPos + w/2 - 32\n            self.resume_button.y = yPos + 20\n\n\n            self.theGame.input.onDown.add(menuClick, self);\n            // And finally the method that handels the pause menu\n        \n            function menuClick(event){\n                \n                // Only act if paused\n                if(self.theGame.paused){\n                    // Calculate the corners of the menu\n                    var x1 = w/2 - 270/2, x2 = w/2 + 270/2,\n                        y1 = h/2 - 180/2, y2 = h/2 + 180/2;\n                    // Check if the click was inside the menu\n                    if(event.x > x1 && event.x < x2 && event.y > y1 && event.y < y2 ){\n                        // The choicemap is an array that will help us see which item was clicked\n                        var choiceMap = ['one', 'two', 'three', 'four', 'five', 'six'];\n                        // Get menu local coordinates for the click\n                        var x = event.x - x1,\n                            y = event.y - y1;\n                        // Calculate the choice \n                        var choice = Math.floor(x / 90) + 3*Math.floor(y / 90);\n                        // Display the choice\n                        self.choiceLabel.text = 'You chose menu item: ' + choiceMap[choice];\n                        \n                    }\n                \n                }\n            }\n            \n            function unpause(event){\n                \n                self.resume_button.setFrames(0, 1, 2);\n                // Only act if paused\n                if(self.theGame.paused){\n\n                    // Remove the menu and the label\n                    self.menu.destroy();\n                    self.choiceLabel.destroy();\n                    self.resume_button.destroy();\n                    self.theGame.paused = false;\n                    add_pause_button(self)\n                                    \n                }\n        \n            } \n            \n        }\n\n        function add_pause_button(self){\n            \n            self.pause_button = self.theGame.add.button(self.theGame.world.centerX, self.theGame.world.centerY, 'pauseButton', paused, this, 1, 0, 2)\n            self.pause_button.fixedToCamera = true\n            self.pause_button.cameraOffset.setTo(w/2-32, 20);\n        }\n    }\n\n    collectStar(player, star) {\n        // Removes the star from the screen\n        star.kill();\n        //  Add and update the score\n        this.score += 10;\n        console.log(this.score)\n        this.scoreText.text = 'score: ' + this.score;\n    }\n \n}\n\nexport default Credits","class Options extends Phaser.State {\n\n    init() {\n        \n    \n    }\n\n    preload() {\n\n        \n    }\n\n    create() {\n\n\n    }\n\n    update() {\n       \n        \n    }\n\n    render(){\n       \n    }\n \n}\n\nexport default Options","import GameMenu from \"./GameMenu\"\nimport Game from \"./Game\"\nimport GameOver from \"./GameOver\"\nimport Credits from \"./Credits\"\nimport Options from \"./Options\"\n\nclass Boot extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.addedStates = false\n        this.theGame.load.onLoadStart.add(this.loadStart, this);\n        this.theGame.load.onFileComplete.add(this.fileComplete, this);\n        this.theGame.load.onLoadComplete.add(this.loadComplete, this);\n        \n        this.theGame.scale.aspectRatio = 1\n        console.log(this.theGame.scale.aspectRatio)\n        console.log(this.theGame)\n        \n    }\n\n    preload() {\n        this.theGame.load.tilemap('testing', 'assets/images/tilemap.json', null, Phaser.Tilemap.TILED_JSON);\n        this.theGame.load.image('tiles', './assets/images/tilemap.png');\n        // this.theGame.load.atlas('atlas', './assets/images/atlas.png');\n        this.theGame.load.image('button_bg', './assets/images/button_background.png');\n        this.theGame.load.image('sky', './assets/images/sky.png');\n        this.theGame.load.image('ground', './assets/images/platform.png');\n        this.theGame.load.image('star', './assets/images/star.png');\n        this.theGame.load.spritesheet('dude', './assets/images/dude.png', 32, 48);\n        this.theGame.load.spritesheet('resumeButton', './assets/pause_menu/resume_button.png', 32, 32);\n        this.theGame.load.spritesheet('pauseButton', './assets/pause_menu/pause_button.png', 32, 32);\n        this.theGame.load.image('menu', './assets/images/number-buttons-90x90.png', 270, 180);\n        this.theGame.load.bitmapFont('carrier_command', 'assets/fonts/carrier_command.png', 'assets/fonts/carrier_command.xml');\n        this.theGame.load.bitmapFont('gem', 'assets/fonts/gem.png', 'assets/fonts/gem.xml');\n        this.theGame.load.spritesheet('menu_start_button', './assets/main_menu/play_button.png', 128, 32)\n        this.theGame.load.image('menu_bg', './assets/main_menu/menu_bg.png')\n    }\n\n    create() {\n\n        this.bmpText = this.theGame.add.bitmapText(10, 100, 'gem','LOADING...',34);\n\n        // bmpText.inputEnabled = true;\n\n        // bmpText.input.enableDrag();\n\n        this.addGameStates();\n        this.addGameMusic();\n\n        //just leaving this here for later, will come in handy maybe\n        //  Register the keys.\n\t    this.leftKey = this.theGame.input.keyboard.addKey(Phaser.Keyboard.LEFT);\n\t    this.rightKey = this.theGame.input.keyboard.addKey(Phaser.Keyboard.RIGHT);\n\t    this.spaceKey = this.theGame.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n\n        //  Stop the following keys from propagating up to the browser\n        this.theGame.input.keyboard.addKeyCapture([ Phaser.Keyboard.LEFT, Phaser.Keyboard.RIGHT, Phaser.Keyboard.SPACEBAR ]);\n\n        \n    }\n\n    update(){\n\n        if(this.addedStates && this.filesLoaded){\n            //this.theGame.state.start(\"GameMenu\");\n            this.theGame.state.start(\"Game\");\n        }\n\n    }\n\n    addGameStates(){\n     \n        this.theGame.state.add(\"GameMenu\",GameMenu);\n        this.theGame.state.add(\"Game\",Game);\n        this.theGame.state.add(\"GameOver\",GameOver);\n        this.theGame.state.add(\"Credits\",Credits);\n        this.theGame.state.add(\"Options\",Options);\n\n        this.addedStates = true\n\n    }\n    \n    addGameMusic(){\n        // music = game.add.audio('dangerous');\n        // music.loop = true;\n        // music.play();\n    }\n\n    loadStart() {\n\n        console.log('loading')\n    \n    }\n    \n   \n    fileComplete(progress, cacheKey, success, totalLoaded, totalFiles) {\n        //http://phaser.io/examples/v2/loader/load-events\n        // text.setText(\"File Complete: \" + progress + \"% - \" + totalLoaded + \" out of \" + totalFiles);\n        console.log(progress)\n    \n    }\n    \n    loadComplete(){\n        this.filesLoaded = true\n    }\n \n}\n\nexport default Boot","//import Scene1 from './states/Scene1.js';\n// import Preload from 'states/Preload';\n// import GameTitle from 'states/GameTitle';\n// import Main from 'states/Main';\n// import GameOver from 'states/GameOver';\nimport Boot from './states/Boot'\n\nclass Game extends Phaser.Game {\n \n    constructor() {\n \n        super({renderer: Phaser.AUTO,\n            width: 512,\n            height: 512,\n            aspectRatio: 1,\n            crisp: true,\n            roundPixels: true,\n            alignH: true,\n            alignV: true,\n            scaleH: 1,\n            scaleV: 1,\n            trimH: 0,\n            trimV: 0,\n            scaleMode: Phaser.ScaleManager.SHOW_ALL,\n            antialias: true });\n        \n        this.state.add('Boot', Boot, false);\n        this.state.start('Boot');\n    }\n \n}\n \nnew Game();\n    \n\n  \n\n\n\n\n"],"names":["GameMenu","theGame","this","game","state","width","_width","height","_height","add","sprite","button","startGame","x","texture","frame","y","start","Phaser","State","Game","w","h","selectedTilesArray","selected","theTileMap","tilemap","addTilesetImage","layer1","createLayer","input","onDown","getTileProperties","forEach","tile","properties","log","getTileX","activePointer","worldX","getTileY","worldY","getTile","length","isBorder","swap","tile1","tile1Copy","Tile","tile2","tile2Copy","prop","hasOwnProperty","putTile","GameOver","Credits","score","cursors","keyboard","createCursorKeys","physics","startSystem","Physics","ARCADE","platforms","group","enableBody","ground","create","world","scale","setTo","body","immovable","ledge","player","arcade","enable","bounce","gravity","collideWorldBounds","animations","stars","i","star","Math","random","scoreText","text","font","fill","align","fixedToCamera","cameraOffset","seeker","anchor","allowRotation","pause_menu","setBounds","camera","follow","Camera","FOLLOW_LOCKON","hitPlatform","collide","velocity","left","isDown","play","right","stop","up","touching","down","overlap","collectStar","rotation","moveToPointer","debug","phaser","self","paused","pause_button","destroy","menu","xPos","yPos","choiceLabel","resume_button","centerX","centerY","event","setFrames","x1","x2","y1","y2","choice","floor","add_pause_button","kill","Options","Boot","addedStates","load","onLoadStart","loadStart","onFileComplete","fileComplete","onLoadComplete","loadComplete","aspectRatio","Tilemap","TILED_JSON","image","spritesheet","bitmapFont","bmpText","bitmapText","addGameStates","addGameMusic","leftKey","addKey","Keyboard","LEFT","rightKey","RIGHT","spaceKey","SPACEBAR","addKeyCapture","filesLoaded","progress","cacheKey","success","totalLoaded","totalFiles","renderer","AUTO","ScaleManager","SHOW_ALL"],"mappings":"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"}