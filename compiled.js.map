{"version":3,"file":"compiled.js","sources":["states/Scene1.js","index.js"],"sourcesContent":["class Scene1 extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.theGame.input.onDown.add(function() { console.log('clicked') })\n        this.score = 0\n    \n    }\n\n    preload() {\n        this.theGame.load.image('sky', 'assets/sky.png');\n        this.theGame.load.image('ground', 'assets/platform.png');\n        this.theGame.load.image('star', 'assets/star.png');\n        this.theGame.load.spritesheet('dude', 'assets/dude.png', 32, 48);\n        this.theGame.load.spritesheet('resumeButton', 'assets/pause_menu/resume_button.png', 32, 32);\n        this.theGame.load.spritesheet('pauseButton', 'assets/pause_menu/pause_button.png', 32, 32);\n        this.theGame.load.image('menu', 'assets/number-buttons-90x90.png', 270, 180);\n        \n    }\n\n    create() {\n        \n        this.cursors = this.theGame.input.keyboard.createCursorKeys();\n        \n        //  We're going to be using physics, so enable the Arcade Physics system\n        this.theGame.physics.startSystem(Phaser.Physics.ARCADE);\n        //  A simple background for our this.theGame\n        this.theGame.add.sprite(0, 0, 'sky');\n        //  The platforms group contains the ground and the 2 ledges we can jump on\n        this.platforms = this.theGame.add.group();\n        //  We will enable physics for any object that is created in group\n        this.platforms.enableBody = true;\n        // Here we create the ground.\n        this.ground = this.platforms.create(0, this.theGame.world.height - 64, 'ground');\n        //  Scale it to fit the width of the this.theGame (the original sprite is 400x32 in size)\n        this.ground.scale.setTo(2, 2);\n        //  This stops it from falling away when you jump on it\n        this.ground.body.immovable = true;\n        //  Now let's create two ledges\n        this.ledge = this.platforms.create(400, 480, 'ground');\n        this.ledge.body.immovable = true;\n        this.ledge = this.platforms.create(-100, 440, 'ground');\n        this.ledge.body.immovable = true;\n        this.ledge = this.platforms.create(200, 400, 'ground');\n        this.ledge.scale.setTo(.2,.5)\n        this.ledge.body.immovable = true;\n        // ready player one\n        // The player and its settings\n        this.player = this.theGame.add.sprite(32, this.theGame.world.height - 150, 'dude');\n        //  We need to enable physics on the player\n        this.theGame.physics.arcade.enable(this.player);\n        //  Player physics properties. Give the little guy a slight bounce.\n        this.player.body.bounce.y = 0.2;\n        this.player.body.gravity.y = 900;\n        this.player.body.collideWorldBounds = true;\n        //  Our two animations, walking left and right.\n        this.player.animations.add('left', [0, 1, 2, 3], 10, true);\n        this.player.animations.add('right', [5, 6, 7, 8], 10, true);\n        //add some stars\n        this.stars = this.theGame.add.group();\n        this.stars.enableBody = true;\n\n        //  Here we'll create 12 of them evenly spaced apart\n        for (var i = 0; i < 12; i++)\n        {\n            //  Create a star inside of the 'stars' group\n            var star = this.stars.create(i * 70, 0, 'star');\n            //  Let gravity do its thing\n            star.body.gravity.y = 900;\n            //  This just gives each star a slightly random bounce value\n            star.body.bounce.y = 0.7 + Math.random() * 0.2;\n        }\n        //gui\n        this.scoreText = this.theGame.add.text(650, 0, \"score: 0\", { font: \"18px Arial\", fill: \"#ffffff\", align: \"right\" });\n        this.scoreText.fixedToCamera = true;\n        this.scoreText.cameraOffset.setTo(650, 0);\n        \n\n        //move sprite to cursor\n        this.seeker = this.theGame.add.sprite(400, 300, '.assets/diamond.png');\n        this.seeker.anchor.setTo(0.5, 0.5);\n\n        //  Enable Arcade Physics for the sprite\n        this.theGame.physics.enable(this.seeker, Phaser.Physics.ARCADE);\n\n        //  Tell it we don't want physics to manage the rotation\n        this.seeker.body.allowRotation = false;\n\n        //pause menu\n        this.pause_menu()\n\n    }\n\n    update() {\n        this.theGame.world.setBounds(0, 0, 1920, 1920);\n        //  Notice that the sprite doesn't have any momentum at all,\n        //  it's all just set by the camera follow type.\n        //  0.1 is the amount of linear interpolation to use.\n        //  The smaller the value, the smooth the camera (and the longer it takes to catch up)\n        this.theGame.camera.follow(this.player, Phaser.Camera.FOLLOW_LOCKON, 0.1, 0.1);\n        //  Collide the player and the stars with the this.platforms\n        var hitPlatform = this.theGame.physics.arcade.collide(this.player, this.platforms);\n        //  Reset the players velocity (movement)\n        this.player.body.velocity.x = 0;\n        if (this.cursors.left.isDown)\n        {\n            //  Move to the left\n            this.player.body.velocity.x = -150;\n            this.player.animations.play('left');\n        }\n        else if (this.cursors.right.isDown)\n        {\n            //  Move to the right\n            this.player.body.velocity.x = 150;\n            this.player.animations.play('right');\n        }\n        else\n        {\n            //  Stand still\n            this.player.animations.stop();\n            this.player.frame = 4;\n        }\n        //  Allow the player to jump if they are touching the ground.\n        if (this.cursors.up.isDown && this.player.body.touching.down && hitPlatform)\n        {\n            this.player.body.velocity.y = -350;\n        }\n        //stars\n        this.theGame.physics.arcade.collide(this.stars, this.platforms);\n        this.theGame.physics.arcade.overlap(this.player, this.stars, this.collectStar, null, this);\n\n        //seeker\n        this.seeker.rotation = this.theGame.physics.arcade.moveToPointer(this.seeker, 60, this.theGame.input.activePointer, 500);\n        \n    }\n\n    render(){\n        var debug = this.theGame.debug;\n        debug.scale(20, 20, '#fff');\n        debug.phaser(10, 580);\n    }\n\n    pause_menu(){\n\n        //pause menu\n        var w = 800, h = 600;\n        \n        add_pause_button(this)\n\n        console.log(this.theGame)\n\n        var self = this\n\n        function paused(){\n\n            // When the paus button is pressed, we pause the this.theGame\n            self.theGame.paused = true;\n            self.pause_button.destroy();\n            // Then add the menu\n            self.menu = self.theGame.add.sprite(w/2, h/2, 'menu');\n            var xPos = self.theGame.camera.x\n            var yPos = self.theGame.camera.y\n\n            // And a label to illustrate which menu item was chosen. (self is not necessary)\n            self.choiceLabel = self.theGame.add.text(w/2, h-150, 'Click outside menu to continue', { font: '30px Arial', fill: '#fff' });\n            self.menu.x = xPos + w/2 - ( 270/2 )\n            self.menu.y = yPos + h/2 - ( 180/2 )\n\n            self.menu.x = self.theGame.camera.x + w/2 - ( 270/2 )\n            self.menu.y = self.theGame.camera.y + h/2 - ( 180/2 )\n\n            self.choiceLabel.x = self.menu.x \n            self.choiceLabel.y = self.menu.y + h/3.5\n\n            self.resume_button = self.theGame.add.button(self.theGame.world.centerX, self.theGame.world.centerY, 'resumeButton', unpause, self, 1, 0, 2);\n            self.resume_button.x = xPos + w/2 - 32\n            self.resume_button.y = yPos + 20\n\n\n            self.theGame.input.onDown.add(menuClick, self);\n            // And finally the method that handels the pause menu\n        \n            function menuClick(event){\n                \n                // Only act if paused\n                if(self.theGame.paused){\n                    // Calculate the corners of the menu\n                    var x1 = w/2 - 270/2, x2 = w/2 + 270/2,\n                        y1 = h/2 - 180/2, y2 = h/2 + 180/2;\n                    // Check if the click was inside the menu\n                    if(event.x > x1 && event.x < x2 && event.y > y1 && event.y < y2 ){\n                        // The choicemap is an array that will help us see which item was clicked\n                        var choiceMap = ['one', 'two', 'three', 'four', 'five', 'six'];\n                        // Get menu local coordinates for the click\n                        var x = event.x - x1,\n                            y = event.y - y1;\n                        // Calculate the choice \n                        var choice = Math.floor(x / 90) + 3*Math.floor(y / 90);\n                        // Display the choice\n                        self.choiceLabel.text = 'You chose menu item: ' + choiceMap[choice];\n                        \n                    }\n                \n                }\n            }\n            \n            function unpause(event){\n                \n                self.resume_button.setFrames(0, 1, 2);\n                // Only act if paused\n                if(self.theGame.paused){\n\n                    // Remove the menu and the label\n                    self.menu.destroy();\n                    self.choiceLabel.destroy();\n                    self.resume_button.destroy();\n                    self.theGame.paused = false;\n                    add_pause_button(self)\n                                    \n                }\n        \n            } \n            \n        }\n\n        function add_pause_button(self){\n            \n            self.pause_button = self.theGame.add.button(self.theGame.world.centerX, self.theGame.world.centerY, 'pauseButton', paused, this, 1, 0, 2)\n            self.pause_button.fixedToCamera = true\n            self.pause_button.cameraOffset.setTo(w/2-32, 20);\n        }\n    }\n\n    collectStar(player, star) {\n        // Removes the star from the screen\n        star.kill();\n        //  Add and update the score\n        this.score += 10;\n        console.log(this.score)\n        this.scoreText.text = 'score: ' + this.score;\n    }\n \n}\n\nexport default Scene1","//import Scene1 from './states/Scene1.js';\n// import Preload from 'states/Preload';\n// import GameTitle from 'states/GameTitle';\n// import Main from 'states/Main';\n// import GameOver from 'states/GameOver';\nimport Scene1 from './states/Scene1'\n\nclass Game extends Phaser.Game {\n \n    constructor() {\n \n        super({renderer: Phaser.AUTO,\n            crisp: true,\n            roundPixels: true,\n            alignH: true,\n            alignV: true,\n            scaleH: 1,\n            scaleV: 1,\n            trimH: 0,\n            trimV: 0,\n            scaleMode: Phaser.ScaleManager.SHOW_ALL,\n            antialias: true });\n        \n        this.state.add('Scene1', Scene1, false);\n        this.state.start('Scene1');\n    }\n \n}\n \nnew Game();\n    \n\n  \n\n\n\n\n"],"names":["Scene1","theGame","this","game","state","input","onDown","add","log","score","load","image","spritesheet","cursors","keyboard","createCursorKeys","physics","startSystem","Phaser","Physics","ARCADE","sprite","platforms","group","enableBody","ground","create","world","height","scale","setTo","body","immovable","ledge","player","arcade","enable","bounce","y","gravity","collideWorldBounds","animations","stars","i","star","Math","random","scoreText","text","font","fill","align","fixedToCamera","cameraOffset","seeker","anchor","allowRotation","pause_menu","setBounds","camera","follow","Camera","FOLLOW_LOCKON","hitPlatform","collide","velocity","x","left","isDown","play","right","stop","frame","up","touching","down","overlap","collectStar","rotation","moveToPointer","activePointer","debug","phaser","w","h","self","paused","pause_button","destroy","menu","xPos","yPos","choiceLabel","resume_button","button","centerX","centerY","event","setFrames","x1","x2","y1","y2","choice","floor","add_pause_button","kill","State","renderer","AUTO","ScaleManager","SHOW_ALL","start","Game"],"mappings":"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"}