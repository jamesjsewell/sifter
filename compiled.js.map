{"version":3,"file":"compiled.js","sources":["states/menus/level_select/level_select.js","states/menus/main/main_menu.js","states/GameMenu.js","states/Game.js","states/GameOver.js","states/Credits.js","states/Options.js","states/Boot.js","index.js"],"sourcesContent":["\nclass LevelSelect {\n\n    constructor(context){\n        this.context = context\n        this.theGame = this.context.theGame\n        this.create_level_select()\n    }\n\n    create_level_select(){\n        console.log(this.theGame)\n        \n        this.lvl_select_bg = this.theGame.add.sprite(0, 0, 'atlas')\n        //this.lvl_select_bg.anchor.setTo(0.5)\n        this.lvl_select_bg.alignIn(this.theGame.camera.view, Phaser.BOTTOM_CENTER)\n        this.level1Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.startGame, this, 'lvl2.png', 'lvl1.png');\n        this.level1Button.anchor.setTo(0.5)\n        this.level2Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.startGame, this, 'lvl4.png', 'lvl3.png');\n        this.level2Button.anchor.setTo(-0.8, 0.5)\n        this.level3Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.startGame, this, 'lvl6.png', 'lvl5.png');\n        this.level3Button.anchor.setTo(-2.1, 0.5)\n        this.level4Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.startGame, this, 'lvl8.png', 'lvl7.png');\n        this.level4Button.anchor.setTo(-3.4, 0.5)\n        this.lvl_select_bg.addChild(this.level1Button);\n        this.lvl_select_bg.addChild(this.level2Button);\n        this.lvl_select_bg.addChild(this.level3Button);\n        this.lvl_select_bg.addChild(this.level4Button);\n        this.lvl_select_bg.frameName = \"level_select_bg.png\"\n\n    }\n\n}\n\nexport default LevelSelect","import LevelSelect from '../level_select/level_select.js'\n\nclass MainMenu{\n\n    constructor(context){\n        this.context = context\n        this.theGame = this.context.theGame\n        this.width = this.theGame._width\n        this.height = this.theGame._height\n        this.create_main_menu()\n    }\n\n    create_main_menu(){\n\n        this.button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.startGame, this, 'play_button2.png', 'play_button1.png');\n        this.button.frameName = \"play_button1.png\"\n        this.button.x = this.width/2 - (this.button.texture.frame.width/2) \n        this.button.y = this.height/2 - (this.button.texture.frame.height/2)\n        \n\n        this.levelSelect = new LevelSelect(this)\n\n        //this.menu_features = new MainMenu(this)\n    }\n\n    startGame(){\n        //console.log('starting game')\n        this.theGame.state.start(\"Game\");\n        \n    }\n\n}\n\nexport default MainMenu","import MainMenu from './menus/main/main_menu'\n\nclass GameMenu extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.width = this.theGame._width\n        this.height = this.theGame._height\n    \n    }\n\n    create() {\n\n        // this.theGame.add.sprite(0, 0, 'menu_bg')\n        // this.button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.startGame, this, 1, 0, 2);\n        // this.button.frameName = \"play_button1.png\"\n        // this.button.x = this.width/2 - (this.button.texture.frame.width/2) \n        // this.button.y = this.height/2 - (this.button.texture.frame.height/2)\n        \n        this.menu_features = new MainMenu(this)\n\n    }\n\n    update() {\n       \n        \n    }\n\n    render(){\n       \n    }\n\n    startGame(){\n        //console.log('starting game')\n        //this.theGame.state.start(\"Game\");\n        \n    }\n \n}\n\nexport default GameMenu","\nclass Game extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.w = this.theGame.width\n        this.h = this.theGame.height\n        this.selectedTilesArray = []\n        this.selected = false\n        this.deadEnds = []\n        this.alreadyMatched = []\n        this.currentCell = null\n        this.cycles = 0\n        this.done = false\n        this.level = 1\n    }\n\n    preload() {\n\n        \n    }\n\n    create() {\n      \n        this.theTileMap = this.theGame.add.tilemap('map2')\n        this.theTileMap.addTilesetImage('tiles');\n        this.layer1 = this.theTileMap.createLayer('level_1')\n\n        //this.layer2 = this.theTileMap.createLayer(1)\n        //this.theTileMap.setLayer(this.layer1)\n        this.currentLayerIndex = this.theTileMap.getLayer(this.theTileMap.currentLayer)\n        console.log(this.currentLayerIndex)\n        \n        //this.layer1.resizeWorld();\n        //this.theTileMap.shuffle(1, 1, 4, 4, this.currentLayerIndex)\n\n        this.theGame.input.onDown.add(this.getTileProperties, this);\n\n        this.theTileMap.forEach((tile)=>{\n            \n            if(tile.properties){\n\n                if(tile.properties.type === \"source\"){\n                    this.sourceBlock = tile\n                    this.firstInChain = this.theTileMap.getTileRight(this.currentLayerIndex, this.sourceBlock.x, this.sourceBlock.y)\n                }\n\n                if(tile.properties.type === \"destination\"){\n                    this.destinationBlock = tile\n                }\n\n            }\n        \n        \n        }, this, 0, 0, 6, 6,this.currentLayerIndex)\n\n    \n\n\n    }\n\n    update() {\n\n        \n    }\n\n    render(){\n       \n    }\n\n    checkForRoadStart(){\n    \n        var startCell = this.theTileMap.getTileRight(this.currentLayerIndex, this.sourceBlock.x, this.sourceBlock.y)\n       \n        if(startCell){\n            if(startCell.properties.left === true){\n                this.currentCell = null\n                this.alreadyMatched = []\n                this.deadEnds = []\n                this.alreadyMatched[0] = startCell\n                this.cycles = 0\n                this.traversePath(startCell)\n            \n            }\n        }\n    }\n\n    traversePath(currentCell){\n\n        if(this.done === false){\n                \n            var foundMatches = this.testConnections(currentCell, this.alreadyMatched)\n\n            if(this.done === true){\n\n                return\n            }\n            \n            this.cycles = this.cycles + 1\n\n            var foundMatches = this.testConnections(currentCell, this.alreadyMatched)\n            \n            if(!foundMatches){\n             \n                \n                if(!this.deadEnds.includes(currentCell)){\n                    \n                    if(currentCell){\n                        this.deadEnds.push(currentCell)\n                    }\n                    \n                }\n                else{\n                    \n                }\n                \n\n                if(this.cycles < 20){\n\n                    if(this.alreadyMatched.length){\n                        currentCell = this.alreadyMatched[this.alreadyMatched.length]\n                        this.traversePath(currentCell)\n                    }\n                    \n                }\n                else{\n                    console.log('cycle limit reached, dead end')              \n                \n                }\n                \n            }\n            else{\n            \n                this.alreadyMatched.push(currentCell)\n                currentCell = null\n\n                if(foundMatches && foundMatches.length){\n\n                    for(var i = 0; i <= foundMatches.length; i++){\n\n                        if(foundMatches[i]){\n                            currentCell = foundMatches[i]\n                        }\n                    }  \n\n                }\n\n                if(currentCell){\n                   \n                    if(this.cycles < 20){\n                        this.traversePath(currentCell)\n                    }\n                    else{\n                        console.log('cycle limit reached')\n                    }\n                    \n                }\n            \n            }\n        }\n    \n    }\n\n    testConnections(theTile, alreadyMatched){\n\n        var matches = []\n\n        if(theTile && theTile.properties){\n\n\n                    \n            var above = this.theTileMap.getTileAbove(this.currentLayerIndex, theTile.x, theTile.y)\n            var below = this.theTileMap.getTileBelow(this.currentLayerIndex, theTile.x, theTile.y)\n            var left = this.theTileMap.getTileLeft(this.currentLayerIndex, theTile.x, theTile.y)\n            var right = this.theTileMap.getTileRight(this.currentLayerIndex, theTile.x, theTile.y)\n\n            var theTileProps = theTile.properties\n\n            if(above){\n                var aboveProps = above.properties\n            }\n\n            if(below){\n                var belowProps = below.properties\n            }\n\n            if(left){\n                var leftProps = left.properties\n            }\n            \n            if(right){\n                var rightProps = right.properties\n            }\n                    \n            if(aboveProps){\n                if(aboveProps.bottom === true && theTileProps.top === true){\n                    \n                    if(!alreadyMatched.includes(above) && !this.deadEnds.includes(above)){\n                        matches.push(above)\n                        \n                    }  \n                    \n                }\n        \n            }\n\n            if(belowProps){\n\n                if(belowProps.top === true && theTileProps.bottom === true){\n                \n                    if(!alreadyMatched.includes(below) && !this.deadEnds.includes(below)){\n                        matches.push(below)\n                        \n                    }      \n                    \n                }\n        \n            }\n\n            if(leftProps){\n\n                if(leftProps.right === true && theTileProps.left === true){\n                    \n                    if(!alreadyMatched.includes(left) && !this.deadEnds.includes(left)){\n                        matches.push(left)\n            \n                    }  \n\n                }\n\n            }\n\n            if(rightProps){\n                console.log(rightProps)\n                if(rightProps.left === true && theTileProps.right === true){\n\n                    if(!alreadyMatched.includes(right) && !this.deadEnds.includes(right)){\n                        \n                        \n                        \n                        matches.push(right)\n                        \n                        if(rightProps.type === \"destination\"){\n                            console.log('donne')\n                           \n                            this.currentCell = null\n                            this.alreadyMatched = []\n                            \n                            this.cycles = 0\n                            this.done = true\n\n                            if(this.level === 1){\n                                this.level = 2\n                            }\n                            else{\n                                this.level = 1\n                            }\n                            \n                            this.change_level()\n                            return\n                        }\n                    }  \n                    \n                        \n                }\n\n            } \n           \n            if(matches.length){\n                return matches\n            }\n            else{\n                return null\n            } \n        \n        }\n    }\n\n    getTileProperties() {\n\n        var x = this.layer1.getTileX(this.theGame.input.activePointer.worldX);\n        var y = this.layer1.getTileY(this.theGame.input.activePointer.worldY);\n        var tile = this.theTileMap.getTile(x, y);\n\n        if(!this.selectedTilesArray.length){\n            \n            if(tile.properties.type === \"connector\" || tile.properties.type === \"blank\"){\n                this.selectedTilesArray[0] = tile\n                this.selected = true\n            \n                this.create_selector(tile.worldX, tile.worldY)\n                return\n            }\n        }\n        \n        if(this.selected === true){\n            if(!tile){\n                console.log('drop selection')\n            }\n\n            if(tile){\n             \n                if(tile.properties.type === \"connector\" || tile.properties.type === \"blank\"){\n                \n                    this.selectedTilesArray[1] = tile\n                    \n                    this.swap()\n\n                    this.remove_selector()\n\n                    return\n                }\n            }\n        }\n        \n    \n    }\n\n    swap(){\n        var tile1 = this.selectedTilesArray[0]\n        var tile1Copy = new Phaser.Tile(this.currentLayerIndex)\n        \n        var tile2 = this.selectedTilesArray[1] \n        var tile2Copy = new Phaser.Tile(this.currentLayerIndex)\n\n        var performSwap = true\n\n        for (var prop in tile2) {\n            if (tile2.hasOwnProperty(prop)) {\n                tile2Copy[prop] = tile2[prop];\n            }\n        }\n\n        for (var prop in tile1) {\n            if (tile1.hasOwnProperty(prop)) {\n                tile1Copy[prop] = tile1[prop];\n            }\n        }\n\n    \n        if(performSwap){\n            \n            this.theTileMap.putTile(tile1, tile2Copy.x, tile2Copy.y, this.currentLayerIndex)\n            this.theTileMap.putTile(tile2Copy, tile1Copy.x, tile1Copy.y, this.currentLayerIndex)\n            this.selectedTilesArray = []\n            this.selected = false\n\n            this.done = false\n            this.checkForRoadStart()\n\n        }\n\n    } \n\n    create_selector(x, y){\n        if(!this.selector){\n            this.selector = this.theGame.add.sprite(x, y, 'atlas', this.currentLayerIndex);\n            this.selector.frameName = \"selector.png\"\n        }\n        else{\n            this.selector.x = x\n            this.selector.y = y\n            this.selector.visible = true\n        }\n           \n        \n        \n    }\n    \n    remove_selector(){\n        this.selector.visible = false\n    }\n\n    change_level(){\n\n        if(this.level === 1){\n           \n        }\n\n        if(this.level === 2){\n            this.layer1.destroy()\n            this.layer1 = this.theTileMap.createLayer('level_2')\n            this.layer1.exists = true\n            this.theTileMap.setLayer(this.layer1)\n            this.currentLayerIndex = this.theTileMap.getLayer(this.theTileMap.currentLayer)\n            console.log(this.currentLayerIndex)\n            this.selector.bringToTop()\n        }\n\n        this.selectedTilesArray = []\n        this.selected = false\n        this.deadEnds = []\n        this.alreadyMatched = []\n        this.currentCell = null\n        this.cycles = 0\n        this.done = false\n    \n\n        this.theTileMap.forEach((tile)=>{\n            \n            if(tile.properties){\n\n                if(tile.properties.type === \"source\"){\n                    this.sourceBlock = tile\n                    this.firstInChain = this.theTileMap.getTileRight(this.currentLayerIndex, this.sourceBlock.x, this.sourceBlock.y)\n                }\n\n                if(tile.properties.type === \"destination\"){\n                    this.destinationBlock = tile\n                }\n\n            }\n        \n        \n        }, this, 0, 0, 6, 6, this.currentLayerIndex)\n\n        console.log(this.sourceBlock)\n    }\n \n}\n\nexport default Game\n\n\n\n        \n","class GameOver extends Phaser.State {\n\n    init() {\n        \n    \n    }\n\n    preload() {\n\n        \n    }\n\n    create() {\n\n\n    }\n\n    update() {\n       \n        \n    }\n\n    render(){\n       \n    }\n \n}\n\nexport default GameOver","class Credits extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.score = 0\n    \n    }\n\n    preload() {\n\n    }\n\n    create() {\n        \n        this.cursors = this.theGame.input.keyboard.createCursorKeys();\n        \n        //  We're going to be using physics, so enable the Arcade Physics system\n        this.theGame.physics.startSystem(Phaser.Physics.ARCADE);\n        //  A simple background for our this.theGame\n        this.theGame.add.sprite(0, 0, 'sky');\n        //  The platforms group contains the ground and the 2 ledges we can jump on\n        this.platforms = this.theGame.add.group();\n        //  We will enable physics for any object that is created in group\n        this.platforms.enableBody = true;\n        // Here we create the ground.\n        this.ground = this.platforms.create(0, this.theGame.world.height - 64, 'ground');\n        //  Scale it to fit the width of the this.theGame (the original sprite is 400x32 in size)\n        this.ground.scale.setTo(2, 2);\n        //  This stops it from falling away when you jump on it\n        this.ground.body.immovable = true;\n        //  Now let's create two ledges\n        this.ledge = this.platforms.create(400, 480, 'ground');\n        this.ledge.body.immovable = true;\n        this.ledge = this.platforms.create(-100, 440, 'ground');\n        this.ledge.body.immovable = true;\n        this.ledge = this.platforms.create(200, 400, 'ground');\n        this.ledge.scale.setTo(.2,.5)\n        this.ledge.body.immovable = true;\n        // ready player one\n        // The player and its settings\n        this.player = this.theGame.add.sprite(32, this.theGame.world.height - 150, 'dude');\n        //  We need to enable physics on the player\n        this.theGame.physics.arcade.enable(this.player);\n        //  Player physics properties. Give the little guy a slight bounce.\n        this.player.body.bounce.y = 0.2;\n        this.player.body.gravity.y = 900;\n        this.player.body.collideWorldBounds = true;\n        //  Our two animations, walking left and right.\n        this.player.animations.add('left', [0, 1, 2, 3], 10, true);\n        this.player.animations.add('right', [5, 6, 7, 8], 10, true);\n        //add some stars\n        this.stars = this.theGame.add.group();\n        this.stars.enableBody = true;\n\n        //  Here we'll create 12 of them evenly spaced apart\n        for (var i = 0; i < 12; i++)\n        {\n            //  Create a star inside of the 'stars' group\n            var star = this.stars.create(i * 70, 0, 'star');\n            //  Let gravity do its thing\n            star.body.gravity.y = 900;\n            //  This just gives each star a slightly random bounce value\n            star.body.bounce.y = 0.7 + Math.random() * 0.2;\n        }\n        //gui\n        this.scoreText = this.theGame.add.text(650, 0, \"score: 0\", { font: \"18px Arial\", fill: \"#ffffff\", align: \"right\" });\n        this.scoreText.fixedToCamera = true;\n        this.scoreText.cameraOffset.setTo(650, 0);\n        \n\n        //move sprite to cursor\n        this.seeker = this.theGame.add.sprite(400, 300, '../assets/images/diamond.png');\n        this.seeker.anchor.setTo(0.5, 0.5);\n\n        //  Enable Arcade Physics for the sprite\n        this.theGame.physics.enable(this.seeker, Phaser.Physics.ARCADE);\n\n        //  Tell it we don't want physics to manage the rotation\n        this.seeker.body.allowRotation = false;\n\n        //pause menu\n        this.pause_menu()\n\n    }\n\n    update() {\n        this.theGame.world.setBounds(0, 0, 1920, 1920);\n        //  Notice that the sprite doesn't have any momentum at all,\n        //  it's all just set by the camera follow type.\n        //  0.1 is the amount of linear interpolation to use.\n        //  The smaller the value, the smooth the camera (and the longer it takes to catch up)\n        this.theGame.camera.follow(this.player, Phaser.Camera.FOLLOW_LOCKON, 0.1, 0.1);\n        //  Collide the player and the stars with the this.platforms\n        var hitPlatform = this.theGame.physics.arcade.collide(this.player, this.platforms);\n        //  Reset the players velocity (movement)\n        this.player.body.velocity.x = 0;\n        if (this.cursors.left.isDown)\n        {\n            //  Move to the left\n            this.player.body.velocity.x = -150;\n            this.player.animations.play('left');\n        }\n        else if (this.cursors.right.isDown)\n        {\n            //  Move to the right\n            this.player.body.velocity.x = 150;\n            this.player.animations.play('right');\n        }\n        else\n        {\n            //  Stand still\n            this.player.animations.stop();\n            this.player.frame = 4;\n        }\n        //  Allow the player to jump if they are touching the ground.\n        if (this.cursors.up.isDown && this.player.body.touching.down && hitPlatform)\n        {\n            this.player.body.velocity.y = -350;\n        }\n        //stars\n        this.theGame.physics.arcade.collide(this.stars, this.platforms);\n        this.theGame.physics.arcade.overlap(this.player, this.stars, this.collectStar, null, this);\n\n        //seeker\n        this.seeker.rotation = this.theGame.physics.arcade.moveToPointer(this.seeker, 60, this.theGame.input.activePointer, 500);\n        \n    }\n\n    render(){\n        var debug = this.theGame.debug;\n        debug.scale(20, 20, '#fff');\n        debug.phaser(10, 580);\n    }\n\n    pause_menu(){\n\n        //pause menu\n        var w = 800, h = 600;\n        \n        add_pause_button(this)\n\n        console.log(this.theGame)\n\n        var self = this\n\n        function paused(){\n\n            // When the paus button is pressed, we pause the this.theGame\n            self.theGame.paused = true;\n            self.pause_button.destroy();\n            // Then add the menu\n            self.menu = self.theGame.add.sprite(w/2, h/2, 'menu');\n            var xPos = self.theGame.camera.x\n            var yPos = self.theGame.camera.y\n\n            // And a label to illustrate which menu item was chosen. (self is not necessary)\n            self.choiceLabel = self.theGame.add.text(w/2, h-150, 'Click outside menu to continue', { font: '30px Arial', fill: '#fff' });\n            self.menu.x = xPos + w/2 - ( 270/2 )\n            self.menu.y = yPos + h/2 - ( 180/2 )\n\n            self.menu.x = self.theGame.camera.x + w/2 - ( 270/2 )\n            self.menu.y = self.theGame.camera.y + h/2 - ( 180/2 )\n\n            self.choiceLabel.x = self.menu.x \n            self.choiceLabel.y = self.menu.y + h/3.5\n\n            self.resume_button = self.theGame.add.button(self.theGame.world.centerX, self.theGame.world.centerY, 'resumeButton', unpause, self, 1, 0, 2);\n            self.resume_button.x = xPos + w/2 - 32\n            self.resume_button.y = yPos + 20\n\n\n            self.theGame.input.onDown.add(menuClick, self);\n            // And finally the method that handels the pause menu\n        \n            function menuClick(event){\n                \n                // Only act if paused\n                if(self.theGame.paused){\n                    // Calculate the corners of the menu\n                    var x1 = w/2 - 270/2, x2 = w/2 + 270/2,\n                        y1 = h/2 - 180/2, y2 = h/2 + 180/2;\n                    // Check if the click was inside the menu\n                    if(event.x > x1 && event.x < x2 && event.y > y1 && event.y < y2 ){\n                        // The choicemap is an array that will help us see which item was clicked\n                        var choiceMap = ['one', 'two', 'three', 'four', 'five', 'six'];\n                        // Get menu local coordinates for the click\n                        var x = event.x - x1,\n                            y = event.y - y1;\n                        // Calculate the choice \n                        var choice = Math.floor(x / 90) + 3*Math.floor(y / 90);\n                        // Display the choice\n                        self.choiceLabel.text = 'You chose menu item: ' + choiceMap[choice];\n                        \n                    }\n                \n                }\n            }\n            \n            function unpause(event){\n                \n                self.resume_button.setFrames(0, 1, 2);\n                // Only act if paused\n                if(self.theGame.paused){\n\n                    // Remove the menu and the label\n                    self.menu.destroy();\n                    self.choiceLabel.destroy();\n                    self.resume_button.destroy();\n                    self.theGame.paused = false;\n                    add_pause_button(self)\n                                    \n                }\n        \n            } \n            \n        }\n\n        function add_pause_button(self){\n            \n            self.pause_button = self.theGame.add.button(self.theGame.world.centerX, self.theGame.world.centerY, 'pauseButton', paused, this, 1, 0, 2)\n            self.pause_button.fixedToCamera = true\n            self.pause_button.cameraOffset.setTo(w/2-32, 20);\n        }\n    }\n\n    collectStar(player, star) {\n        // Removes the star from the screen\n        star.kill();\n        //  Add and update the score\n        this.score += 10;\n        console.log(this.score)\n        this.scoreText.text = 'score: ' + this.score;\n    }\n \n}\n\nexport default Credits","class Options extends Phaser.State {\n\n    init() {\n        \n    \n    }\n\n    preload() {\n\n        \n    }\n\n    create() {\n\n\n    }\n\n    update() {\n       \n        \n    }\n\n    render(){\n       \n    }\n \n}\n\nexport default Options","import GameMenu from \"./GameMenu\"\nimport Game from \"./Game\"\nimport GameOver from \"./GameOver\"\nimport Credits from \"./Credits\"\nimport Options from \"./Options\"\n\nclass Boot extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.addedStates = false\n        this.theGame.load.onLoadStart.add(this.loadStart, this);\n        this.theGame.load.onFileComplete.add(this.fileComplete, this);\n        this.theGame.load.onLoadComplete.add(this.loadComplete, this);\n        \n        this.theGame.scale.aspectRatio = 1\n        console.log(this.theGame.scale.aspectRatio)\n        console.log(this.theGame)\n        \n    }\n\n    preload() {\n        this.theGame.load.tilemap('map2', 'assets/images/tilemap_2.json', null, Phaser.Tilemap.TILED_JSON);\n        this.theGame.load.tilemap('map3', 'assets/images/tilemap_3.json', null, Phaser.Tilemap.TILED_JSON);\n        this.theGame.load.image('tiles', './assets/images/tilemap.png');\n        this.theGame.load.atlas('atlas', 'assets/images/atlas.png', 'assets/images/atlas.json');\n        this.theGame.load.image('button_bg', './assets/images/button_background.png');\n        this.theGame.load.image('sky', './assets/images/sky.png');\n        this.theGame.load.image('ground', './assets/images/platform.png');\n        this.theGame.load.image('star', './assets/images/star.png');\n        this.theGame.load.spritesheet('dude', './assets/images/dude.png', 32, 48);\n        this.theGame.load.spritesheet('resumeButton', './assets/pause_menu/resume_button.png', 32, 32);\n        this.theGame.load.spritesheet('pauseButton', './assets/pause_menu/pause_button.png', 32, 32);\n        this.theGame.load.image('menu', './assets/images/number-buttons-90x90.png', 270, 180);\n        this.theGame.load.bitmapFont('carrier_command', 'assets/fonts/carrier_command.png', 'assets/fonts/carrier_command.xml');\n        this.theGame.load.bitmapFont('gem', 'assets/fonts/gem.png', 'assets/fonts/gem.xml');\n        this.theGame.load.spritesheet('menu_start_button', './assets/main_menu/play_button.png', 128, 32)\n        this.theGame.load.image('menu_bg', './assets/main_menu/menu_bg.png')\n    }\n\n    create() {\n\n        this.bmpText = this.theGame.add.bitmapText(10, 100, 'gem','LOADING...',34);\n\n        // bmpText.inputEnabled = true;\n\n        // bmpText.input.enableDrag();\n\n        this.addGameStates();\n        this.addGameMusic();\n\n        //just leaving this here for later, will come in handy maybe\n        //  Register the keys.\n\t    this.leftKey = this.theGame.input.keyboard.addKey(Phaser.Keyboard.LEFT);\n\t    this.rightKey = this.theGame.input.keyboard.addKey(Phaser.Keyboard.RIGHT);\n\t    this.spaceKey = this.theGame.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n\n        //  Stop the following keys from propagating up to the browser\n        this.theGame.input.keyboard.addKeyCapture([ Phaser.Keyboard.LEFT, Phaser.Keyboard.RIGHT, Phaser.Keyboard.SPACEBAR ]);\n\n        \n    }\n\n    update(){\n\n        if(this.addedStates && this.filesLoaded){\n            this.theGame.state.start(\"GameMenu\");\n            //this.theGame.state.start(\"Game\");\n        }\n\n    }\n\n    addGameStates(){\n     \n        this.theGame.state.add(\"GameMenu\",GameMenu);\n        this.theGame.state.add(\"Game\",Game);\n        this.theGame.state.add(\"GameOver\",GameOver);\n        this.theGame.state.add(\"Credits\",Credits);\n        this.theGame.state.add(\"Options\",Options);\n\n        this.addedStates = true\n\n    }\n    \n    addGameMusic(){\n        // music = game.add.audio('dangerous');\n        // music.loop = true;\n        // music.play();\n    }\n\n    loadStart() {\n\n        console.log('loading')\n    \n    }\n    \n   \n    fileComplete(progress, cacheKey, success, totalLoaded, totalFiles) {\n        //http://phaser.io/examples/v2/loader/load-events\n        // text.setText(\"File Complete: \" + progress + \"% - \" + totalLoaded + \" out of \" + totalFiles);\n        console.log(progress)\n    \n    }\n    \n    loadComplete(){\n        this.filesLoaded = true\n    }\n \n}\n\nexport default Boot","//import Scene1 from './states/Scene1.js';\n// import Preload from 'states/Preload';\n// import GameTitle from 'states/GameTitle';\n// import Main from 'states/Main';\n// import GameOver from 'states/GameOver';\nimport Boot from './states/Boot'\n\nclass Game extends Phaser.Game {\n \n    constructor() {\n \n        super({renderer: Phaser.AUTO,\n            width: 384,\n            height: 384,\n            aspectRatio: 1,\n            crisp: true,\n            roundPixels: true,\n            alignH: true,\n            alignV: true,\n            scaleH: 1,\n            scaleV: 1,\n            trimH: 0,\n            trimV: 0,\n            scaleMode: Phaser.ScaleManager.SHOW_ALL,\n            antialias: true });\n        \n        this.state.add('Boot', Boot, false);\n        this.state.start('Boot');\n    }\n \n}\n \nnew Game();\n    \n\n  \n\n\n\n\n"],"names":["LevelSelect","context","theGame","this","create_level_select","log","lvl_select_bg","add","sprite","alignIn","camera","view","Phaser","BOTTOM_CENTER","level1Button","button","width","height","startGame","anchor","setTo","level2Button","level3Button","level4Button","addChild","frameName","MainMenu","_width","_height","create_main_menu","x","texture","frame","y","levelSelect","state","start","GameMenu","game","menu_features","State","Game","w","h","selectedTilesArray","selected","deadEnds","alreadyMatched","currentCell","cycles","done","level","theTileMap","tilemap","addTilesetImage","layer1","createLayer","currentLayerIndex","getLayer","currentLayer","input","onDown","getTileProperties","forEach","tile","properties","type","sourceBlock","firstInChain","_this2","getTileRight","destinationBlock","startCell","left","traversePath","foundMatches","testConnections","push","length","i","includes","theTile","matches","above","getTileAbove","below","getTileBelow","getTileLeft","right","theTileProps","aboveProps","belowProps","leftProps","rightProps","bottom","top","change_level","getTileX","activePointer","worldX","getTileY","worldY","getTile","swap","remove_selector","create_selector","tile1","tile1Copy","Tile","tile2","tile2Copy","prop","hasOwnProperty","putTile","checkForRoadStart","selector","visible","destroy","exists","setLayer","bringToTop","_this3","GameOver","Credits","score","cursors","keyboard","createCursorKeys","physics","startSystem","Physics","ARCADE","platforms","group","enableBody","ground","create","world","scale","body","immovable","ledge","player","arcade","enable","bounce","gravity","collideWorldBounds","animations","stars","star","Math","random","scoreText","text","font","fill","align","fixedToCamera","cameraOffset","seeker","allowRotation","pause_menu","setBounds","follow","Camera","FOLLOW_LOCKON","hitPlatform","collide","velocity","isDown","play","stop","up","touching","down","overlap","collectStar","rotation","moveToPointer","debug","phaser","self","paused","pause_button","menu","xPos","yPos","choiceLabel","resume_button","centerX","centerY","event","setFrames","x1","x2","y1","y2","choice","floor","add_pause_button","kill","Options","Boot","addedStates","load","onLoadStart","loadStart","onFileComplete","fileComplete","onLoadComplete","loadComplete","aspectRatio","Tilemap","TILED_JSON","image","atlas","spritesheet","bitmapFont","bmpText","bitmapText","addGameStates","addGameMusic","leftKey","addKey","Keyboard","LEFT","rightKey","RIGHT","spaceKey","SPACEBAR","addKeyCapture","filesLoaded","progress","cacheKey","success","totalLoaded","totalFiles","renderer","AUTO","ScaleManager","SHOW_ALL"],"mappings":"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"}