{"version":3,"file":"compiled.js","sources":["states/menus/level_select/level_select.js","states/menus/main/main_menu.js","states/GameMenu.js","states/Game.js","states/GameOver.js","states/Credits.js","states/Options.js","states/LevelComplete.js","states/Boot.js","index.js"],"sourcesContent":["\nclass LevelSelect {\n\n    constructor(context){\n        this.context = context\n        this.theGame = this.context.theGame\n        this.create_level_select()\n    }\n\n    create_level_select(){\n    \n        \n        this.lvl_select_bg = this.theGame.add.sprite(0, 0, 'atlas')\n      \n        this.lvl_select_bg.alignIn(this.theGame.camera.view, Phaser.CENTER)\n        this.level1Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level1, this, 'lvl2.png', 'lvl1.png');\n        this.level1Button.anchor.setTo(0.5)\n        this.level2Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level2, this, 'lvl4.png', 'lvl3.png');\n        this.level2Button.anchor.setTo(-0.8, 0.5)\n        this.level3Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level3, this, 'lvl6.png', 'lvl5.png');\n        this.level3Button.anchor.setTo(-2.1, 0.5)\n        this.level4Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level4, this, 'lvl8.png', 'lvl7.png');\n        this.level4Button.anchor.setTo(-3.4, 0.5)\n        this.lvl_select_bg.addChild(this.level1Button);\n        this.lvl_select_bg.addChild(this.level2Button);\n        this.lvl_select_bg.addChild(this.level3Button);\n        this.lvl_select_bg.addChild(this.level4Button);\n        this.lvl_select_bg.frameName = \"level_select_bg.png\"\n\n\n\n    }\n\n    level1(){\n        this.startLevel(0)\n    }\n    level2(){\n        this.startLevel(1)\n    }\n    level3(){\n        this.startLevel(2)\n    }\n    level4(){\n        this.startLevel(3)\n    }\n    startLevel(lvl){\n        console.log(this)\n        this.theGame.theLevel = lvl\n        this.theGame.state.start(\"Game\")\n    }\n\n}\n\nexport default LevelSelect","import LevelSelect from '../level_select/level_select.js'\n\nclass MainMenu{\n\n    constructor(context){\n        this.context = context\n        this.theGame = this.context.theGame\n        this.width = this.theGame._width\n        this.height = this.theGame._height\n        this.create_main_menu()\n    }\n\n    create_main_menu(){\n\n        // this.button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.startGame, this, 'play_button2.png', 'play_button1.png');\n        // this.button.frameName = \"play_button1.png\"\n        // this.button.x = this.width/2 - (this.button.texture.frame.width/2) \n        // this.button.y = this.height/2 - (this.button.texture.frame.height/2)\n        \n        this.levelSelect = new LevelSelect(this)\n\n        //this.menu_features = new MainMenu(this)\n    }\n\n    startGame(){\n        //console.log('starting game')\n        this.theGame.state.start(\"Game\");\n        \n    }\n\n}\n\nexport default MainMenu","import MainMenu from './menus/main/main_menu'\n\nclass GameMenu extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.width = this.theGame._width\n        this.height = this.theGame._height\n    \n    }\n\n    create() {\n\n        // this.theGame.add.sprite(0, 0, 'menu_bg')\n        // this.button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.startGame, this, 1, 0, 2);\n        // this.button.frameName = \"play_button1.png\"\n        // this.button.x = this.width/2 - (this.button.texture.frame.width/2) \n        // this.button.y = this.height/2 - (this.button.texture.frame.height/2)\n        \n        this.menu_features = new MainMenu(this)\n\n    }\n\n    update() {\n       \n        \n    }\n\n    render(){\n       \n    }\n\n    startGame(){\n        //console.log('starting game')\n        //this.theGame.state.start(\"Game\");\n        \n    }\n \n}\n\nexport default GameMenu","import PauseMenu from './menus/pause/pause_menu.js'\n\nclass Game extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.w = this.theGame.width\n        this.h = this.theGame.height\n        this.selectedTilesArray = []\n        this.selected = false\n        this.deadEnds = []\n        this.alreadyMatched = []\n        this.currentCell = null\n        this.cycles = 0\n        this.done = false\n        this.level = this.theGame.theLevel\n\n        \n    }\n\n    preload() {\n\n        \n    }\n\n    create() {\n    \n        this.theTileMap = this.theGame.add.tilemap('map2')\n        this.theTileMap.addTilesetImage('tiles');\n        this.layer1 = this.theTileMap.createLayer(this.level)\n        this.layer1.exists = true\n        this.theTileMap.setLayer(this.layer1)\n        this.currentLayerIndex = this.theTileMap.getLayer(this.theTileMap.currentLayer)\n\n        //this.layer2 = this.theTileMap.createLayer(1)\n        //this.theTileMap.setLayer(this.layer1)\n        this.currentLayerIndex = this.level\n        console.log(this.currentLayerIndex)\n        \n        //this.layer1.resizeWorld();\n        //this.theTileMap.shuffle(1, 1, 4, 4, this.currentLayerIndex)\n\n        this.theGame.input.onDown.add(this.getTileProperties, this);\n\n        this.theTileMap.forEach((tile)=>{\n            \n            if(tile.properties){\n\n                if(tile.properties.type === \"source\"){\n                    this.sourceBlock = tile\n                    this.firstInChain = this.theTileMap.getTileRight(this.currentLayerIndex, this.sourceBlock.x, this.sourceBlock.y)\n                }\n\n                if(tile.properties.type === \"destination\"){\n                    this.destinationBlock = tile\n                }\n\n            }\n        \n        \n        }, this, 0, 0, 6, 6,this.currentLayerIndex)\n\n        \n        \n        this.selector = this.theGame.add.sprite(0, 0, 'atlas', this.currentLayerIndex);\n        this.selector.frameName = \"selector.png\"\n        this.selector.visible = false\n        \n\n\n    }\n\n    update() {\n\n        \n    }\n\n    render(){\n       \n    }\n\n    checkForRoadStart(){\n    \n        var startCell = this.theTileMap.getTileRight(this.currentLayerIndex, this.sourceBlock.x, this.sourceBlock.y)\n       \n        if(startCell){\n            if(startCell.properties.left === true){\n                this.currentCell = null\n                this.alreadyMatched = []\n                this.deadEnds = []\n                this.alreadyMatched[0] = startCell\n                this.cycles = 0\n                this.traversePath(startCell)\n            \n            }\n        }\n    }\n\n    traversePath(currentCell){\n\n        if(this.done === false){\n                \n            var foundMatches = this.testConnections(currentCell, this.alreadyMatched)\n\n            if(this.done === true){\n\n                return\n            }\n            \n            this.cycles = this.cycles + 1\n\n            var foundMatches = this.testConnections(currentCell, this.alreadyMatched)\n            \n            if(!foundMatches){\n             \n                \n                if(!this.deadEnds.includes(currentCell)){\n                    \n                    if(currentCell){\n                        this.deadEnds.push(currentCell)\n                    }\n                    \n                }\n                else{\n                    \n                }\n                \n\n                if(this.cycles < 20){\n\n                    if(this.alreadyMatched.length){\n                        currentCell = this.alreadyMatched[this.alreadyMatched.length]\n                        this.traversePath(currentCell)\n                    }\n                    \n                }\n                else{\n                    console.log('cycle limit reached, dead end')              \n                \n                }\n                \n            }\n            else{\n            \n                this.alreadyMatched.push(currentCell)\n                currentCell = null\n\n                if(foundMatches && foundMatches.length){\n\n                    for(var i = 0; i <= foundMatches.length; i++){\n\n                        if(foundMatches[i]){\n                            currentCell = foundMatches[i]\n                        }\n                    }  \n\n                }\n\n                if(currentCell){\n                   \n                    if(this.cycles < 20){\n                        this.traversePath(currentCell)\n                    }\n                    else{\n                        console.log('cycle limit reached')\n                    }\n                    \n                }\n            \n            }\n        }\n    \n    }\n\n    testConnections(theTile, alreadyMatched){\n\n        var matches = []\n\n        if(theTile && theTile.properties){\n\n\n                    \n            var above = this.theTileMap.getTileAbove(this.currentLayerIndex, theTile.x, theTile.y)\n            var below = this.theTileMap.getTileBelow(this.currentLayerIndex, theTile.x, theTile.y)\n            var left = this.theTileMap.getTileLeft(this.currentLayerIndex, theTile.x, theTile.y)\n            var right = this.theTileMap.getTileRight(this.currentLayerIndex, theTile.x, theTile.y)\n\n            var theTileProps = theTile.properties\n\n            if(above){\n                var aboveProps = above.properties\n            }\n\n            if(below){\n                var belowProps = below.properties\n            }\n\n            if(left){\n                var leftProps = left.properties\n            }\n            \n            if(right){\n                var rightProps = right.properties\n            }\n                    \n            if(aboveProps){\n                if(aboveProps.bottom === true && theTileProps.top === true){\n                    \n                    if(!alreadyMatched.includes(above) && !this.deadEnds.includes(above)){\n                        matches.push(above)\n                        \n                    }  \n                    \n                }\n        \n            }\n\n            if(belowProps){\n\n                if(belowProps.top === true && theTileProps.bottom === true){\n                \n                    if(!alreadyMatched.includes(below) && !this.deadEnds.includes(below)){\n                        matches.push(below)\n                        \n                    }      \n                    \n                }\n        \n            }\n\n            if(leftProps){\n\n                if(leftProps.right === true && theTileProps.left === true){\n                    \n                    if(!alreadyMatched.includes(left) && !this.deadEnds.includes(left)){\n                        matches.push(left)\n            \n                    }  \n\n                }\n\n            }\n\n            if(rightProps){\n                console.log(rightProps)\n                if(rightProps.left === true && theTileProps.right === true){\n\n                    if(!alreadyMatched.includes(right) && !this.deadEnds.includes(right)){\n                        \n                        \n                        \n                        matches.push(right)\n                        \n                        if(rightProps.type === \"destination\"){\n                            console.log('donne')\n                           \n                            this.currentCell = null\n                            this.alreadyMatched = []\n                            \n                            this.cycles = 0\n                            this.done = true\n\n                            //this.level = this.level + 1\n                            \n                            //this.change_level()\n                            this.theGame.state.start(\"LevelComplete\")\n                            return\n                        }\n                    }  \n                    \n                        \n                }\n\n            } \n           \n            if(matches.length){\n                return matches\n            }\n            else{\n                return null\n            } \n        \n        }\n    }\n\n    getTileProperties() {\n\n        var x = this.layer1.getTileX(this.theGame.input.activePointer.worldX);\n        var y = this.layer1.getTileY(this.theGame.input.activePointer.worldY);\n        var tile = this.theTileMap.getTile(x, y);\n\n        if(!this.selectedTilesArray.length){\n            \n            if(tile.properties.type === \"connector\" || tile.properties.type === \"blank\"){\n                this.selectedTilesArray[0] = tile\n                this.selected = true\n            \n                this.create_selector(tile.worldX, tile.worldY)\n                return\n            }\n        }\n        \n        if(this.selected === true){\n            if(!tile){\n                console.log('drop selection')\n            }\n\n            if(tile){\n             \n                if(tile.properties.type === \"connector\" || tile.properties.type === \"blank\"){\n                \n                    this.selectedTilesArray[1] = tile\n                    \n                    this.swap()\n\n                    this.remove_selector()\n\n                    return\n                }\n            }\n        }\n        \n    \n    }\n\n    swap(){\n\n        var tile1 = this.selectedTilesArray[0]\n        var tile1Copy = new Phaser.Tile(this.currentLayerIndex)\n        \n        var tile2 = this.selectedTilesArray[1] \n        var tile2Copy = new Phaser.Tile(this.currentLayerIndex)\n\n        var performSwap = true\n\n        for (var prop in tile2) {\n            if (tile2.hasOwnProperty(prop)) {\n                tile2Copy[prop] = tile2[prop];\n            }\n        }\n\n        for (var prop in tile1) {\n            if (tile1.hasOwnProperty(prop)) {\n                tile1Copy[prop] = tile1[prop];\n            }\n        }\n\n    \n        if(performSwap){\n            \n            this.theTileMap.putTile(tile1, tile2Copy.x, tile2Copy.y, this.currentLayerIndex)\n            this.theTileMap.putTile(tile2Copy, tile1Copy.x, tile1Copy.y, this.currentLayerIndex)\n            this.selectedTilesArray = []\n            this.selected = false\n\n            this.done = false\n            this.checkForRoadStart()\n\n        }\n\n    } \n\n    create_selector(x, y){\n\n        if(this.selector && x && y){\n            this.selector.bringToTop()\n            this.selector.z = 20\n            this.selector.x = x\n            this.selector.y = y\n            this.selector.visible = true\n        }\n\n        else{\n            \n        }\n           \n        \n        \n    }\n    \n    remove_selector(){\n        this.selector.visible = false\n    }\n\n    change_level(){\n\n        this.layer1.destroy()\n\n        this.layer1 = this.theTileMap.createLayer(this.level)\n    \n        this.layer1.exists = true\n        this.theTileMap.setLayer(this.layer1)\n        this.currentLayerIndex = this.theTileMap.getLayer(this.theTileMap.currentLayer)\n        this.selector.bringToTop()\n\n        this.selectedTilesArray = []\n        this.selected = false\n        this.deadEnds = []\n        this.alreadyMatched = []\n        this.currentCell = null\n        this.cycles = 0\n        this.done = false\n    \n\n        this.theTileMap.forEach((tile)=>{\n            \n            if(tile.properties){\n\n                if(tile.properties.type === \"source\"){\n                    this.sourceBlock = tile\n                    this.firstInChain = this.theTileMap.getTileRight(this.currentLayerIndex, this.sourceBlock.x, this.sourceBlock.y)\n                }\n\n                if(tile.properties.type === \"destination\"){\n                    this.destinationBlock = tile\n                }\n\n            }\n        \n        \n        }, this, 0, 0, 6, 6, this.currentLayerIndex)\n\n        console.log(this.sourceBlock)\n    }\n \n}\n\nexport default Game\n\n\n\n        \n","class GameOver extends Phaser.State {\n\n    init() {\n        \n    \n    }\n\n    preload() {\n\n        \n    }\n\n    create() {\n\n\n    }\n\n    update() {\n       \n        \n    }\n\n    render(){\n       \n    }\n \n}\n\nexport default GameOver","class Credits extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.score = 0\n    \n    }\n\n    preload() {\n\n    }\n\n    create() {\n        \n        this.cursors = this.theGame.input.keyboard.createCursorKeys();\n        \n        //  We're going to be using physics, so enable the Arcade Physics system\n        this.theGame.physics.startSystem(Phaser.Physics.ARCADE);\n        //  A simple background for our this.theGame\n        this.theGame.add.sprite(0, 0, 'sky');\n        //  The platforms group contains the ground and the 2 ledges we can jump on\n        this.platforms = this.theGame.add.group();\n        //  We will enable physics for any object that is created in group\n        this.platforms.enableBody = true;\n        // Here we create the ground.\n        this.ground = this.platforms.create(0, this.theGame.world.height - 64, 'ground');\n        //  Scale it to fit the width of the this.theGame (the original sprite is 400x32 in size)\n        this.ground.scale.setTo(2, 2);\n        //  This stops it from falling away when you jump on it\n        this.ground.body.immovable = true;\n        //  Now let's create two ledges\n        this.ledge = this.platforms.create(400, 480, 'ground');\n        this.ledge.body.immovable = true;\n        this.ledge = this.platforms.create(-100, 440, 'ground');\n        this.ledge.body.immovable = true;\n        this.ledge = this.platforms.create(200, 400, 'ground');\n        this.ledge.scale.setTo(.2,.5)\n        this.ledge.body.immovable = true;\n        // ready player one\n        // The player and its settings\n        this.player = this.theGame.add.sprite(32, this.theGame.world.height - 150, 'dude');\n        //  We need to enable physics on the player\n        this.theGame.physics.arcade.enable(this.player);\n        //  Player physics properties. Give the little guy a slight bounce.\n        this.player.body.bounce.y = 0.2;\n        this.player.body.gravity.y = 900;\n        this.player.body.collideWorldBounds = true;\n        //  Our two animations, walking left and right.\n        this.player.animations.add('left', [0, 1, 2, 3], 10, true);\n        this.player.animations.add('right', [5, 6, 7, 8], 10, true);\n        //add some stars\n        this.stars = this.theGame.add.group();\n        this.stars.enableBody = true;\n\n        //  Here we'll create 12 of them evenly spaced apart\n        for (var i = 0; i < 12; i++)\n        {\n            //  Create a star inside of the 'stars' group\n            var star = this.stars.create(i * 70, 0, 'star');\n            //  Let gravity do its thing\n            star.body.gravity.y = 900;\n            //  This just gives each star a slightly random bounce value\n            star.body.bounce.y = 0.7 + Math.random() * 0.2;\n        }\n        //gui\n        this.scoreText = this.theGame.add.text(650, 0, \"score: 0\", { font: \"18px Arial\", fill: \"#ffffff\", align: \"right\" });\n        this.scoreText.fixedToCamera = true;\n        this.scoreText.cameraOffset.setTo(650, 0);\n        \n\n        //move sprite to cursor\n        this.seeker = this.theGame.add.sprite(400, 300, '../assets/images/diamond.png');\n        this.seeker.anchor.setTo(0.5, 0.5);\n\n        //  Enable Arcade Physics for the sprite\n        this.theGame.physics.enable(this.seeker, Phaser.Physics.ARCADE);\n\n        //  Tell it we don't want physics to manage the rotation\n        this.seeker.body.allowRotation = false;\n\n        //pause menu\n        this.pause_menu()\n\n    }\n\n    update() {\n        this.theGame.world.setBounds(0, 0, 1920, 1920);\n        //  Notice that the sprite doesn't have any momentum at all,\n        //  it's all just set by the camera follow type.\n        //  0.1 is the amount of linear interpolation to use.\n        //  The smaller the value, the smooth the camera (and the longer it takes to catch up)\n        this.theGame.camera.follow(this.player, Phaser.Camera.FOLLOW_LOCKON, 0.1, 0.1);\n        //  Collide the player and the stars with the this.platforms\n        var hitPlatform = this.theGame.physics.arcade.collide(this.player, this.platforms);\n        //  Reset the players velocity (movement)\n        this.player.body.velocity.x = 0;\n        if (this.cursors.left.isDown)\n        {\n            //  Move to the left\n            this.player.body.velocity.x = -150;\n            this.player.animations.play('left');\n        }\n        else if (this.cursors.right.isDown)\n        {\n            //  Move to the right\n            this.player.body.velocity.x = 150;\n            this.player.animations.play('right');\n        }\n        else\n        {\n            //  Stand still\n            this.player.animations.stop();\n            this.player.frame = 4;\n        }\n        //  Allow the player to jump if they are touching the ground.\n        if (this.cursors.up.isDown && this.player.body.touching.down && hitPlatform)\n        {\n            this.player.body.velocity.y = -350;\n        }\n        //stars\n        this.theGame.physics.arcade.collide(this.stars, this.platforms);\n        this.theGame.physics.arcade.overlap(this.player, this.stars, this.collectStar, null, this);\n\n        //seeker\n        this.seeker.rotation = this.theGame.physics.arcade.moveToPointer(this.seeker, 60, this.theGame.input.activePointer, 500);\n        \n    }\n\n    render(){\n        var debug = this.theGame.debug;\n        debug.scale(20, 20, '#fff');\n        debug.phaser(10, 580);\n    }\n\n    pause_menu(){\n\n        //pause menu\n        var w = 800, h = 600;\n        \n        add_pause_button(this)\n\n        console.log(this.theGame)\n\n        var self = this\n\n        function paused(){\n\n            // When the paus button is pressed, we pause the this.theGame\n            self.theGame.paused = true;\n            self.pause_button.destroy();\n            // Then add the menu\n            self.menu = self.theGame.add.sprite(w/2, h/2, 'menu');\n            var xPos = self.theGame.camera.x\n            var yPos = self.theGame.camera.y\n\n            // And a label to illustrate which menu item was chosen. (self is not necessary)\n            self.choiceLabel = self.theGame.add.text(w/2, h-150, 'Click outside menu to continue', { font: '30px Arial', fill: '#fff' });\n            self.menu.x = xPos + w/2 - ( 270/2 )\n            self.menu.y = yPos + h/2 - ( 180/2 )\n\n            self.menu.x = self.theGame.camera.x + w/2 - ( 270/2 )\n            self.menu.y = self.theGame.camera.y + h/2 - ( 180/2 )\n\n            self.choiceLabel.x = self.menu.x \n            self.choiceLabel.y = self.menu.y + h/3.5\n\n            self.resume_button = self.theGame.add.button(self.theGame.world.centerX, self.theGame.world.centerY, 'resumeButton', unpause, self, 1, 0, 2);\n            self.resume_button.x = xPos + w/2 - 32\n            self.resume_button.y = yPos + 20\n\n\n            self.theGame.input.onDown.add(menuClick, self);\n            // And finally the method that handels the pause menu\n        \n            function menuClick(event){\n                \n                // Only act if paused\n                if(self.theGame.paused){\n                    // Calculate the corners of the menu\n                    var x1 = w/2 - 270/2, x2 = w/2 + 270/2,\n                        y1 = h/2 - 180/2, y2 = h/2 + 180/2;\n                    // Check if the click was inside the menu\n                    if(event.x > x1 && event.x < x2 && event.y > y1 && event.y < y2 ){\n                        // The choicemap is an array that will help us see which item was clicked\n                        var choiceMap = ['one', 'two', 'three', 'four', 'five', 'six'];\n                        // Get menu local coordinates for the click\n                        var x = event.x - x1,\n                            y = event.y - y1;\n                        // Calculate the choice \n                        var choice = Math.floor(x / 90) + 3*Math.floor(y / 90);\n                        // Display the choice\n                        self.choiceLabel.text = 'You chose menu item: ' + choiceMap[choice];\n                        \n                    }\n                \n                }\n            }\n            \n            function unpause(event){\n                \n                self.resume_button.setFrames(0, 1, 2);\n                // Only act if paused\n                if(self.theGame.paused){\n\n                    // Remove the menu and the label\n                    self.menu.destroy();\n                    self.choiceLabel.destroy();\n                    self.resume_button.destroy();\n                    self.theGame.paused = false;\n                    add_pause_button(self)\n                                    \n                }\n        \n            } \n            \n        }\n\n        function add_pause_button(self){\n            \n            self.pause_button = self.theGame.add.button(self.theGame.world.centerX, self.theGame.world.centerY, 'pauseButton', paused, this, 1, 0, 2)\n            self.pause_button.fixedToCamera = true\n            self.pause_button.cameraOffset.setTo(w/2-32, 20);\n        }\n    }\n\n    collectStar(player, star) {\n        // Removes the star from the screen\n        star.kill();\n        //  Add and update the score\n        this.score += 10;\n        console.log(this.score)\n        this.scoreText.text = 'score: ' + this.score;\n    }\n \n}\n\nexport default Credits","class Options extends Phaser.State {\n\n    init() {\n        \n    \n    }\n\n    preload() {\n\n        \n    }\n\n    create() {\n\n\n    }\n\n    update() {\n       \n        \n    }\n\n    render(){\n       \n    }\n \n}\n\nexport default Options","class LevelComplete extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.score = this.theGame.completionTime\n    }\n\n    preload() {\n\n        \n    }\n\n    create() {\n\n        \n        this.lvl_select_bg = this.theGame.add.sprite(0, 0, 'atlas')\n        this.lvl_select_bg.alignIn(this.theGame.camera.view, Phaser.BOTTOM_CENTER)\n        this.level1Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level1, this, 'lvl2.png', 'lvl1.png');\n        this.level1Button.anchor.setTo(0.5)\n        this.level2Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level2, this, 'lvl4.png', 'lvl3.png');\n        this.level2Button.anchor.setTo(-0.8, 0.5)\n        this.level3Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level3, this, 'lvl6.png', 'lvl5.png');\n        this.level3Button.anchor.setTo(-2.1, 0.5)\n        this.level4Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level4, this, 'lvl8.png', 'lvl7.png');\n        this.level4Button.anchor.setTo(-3.4, 0.5)\n        this.lvl_select_bg.addChild(this.level1Button);\n        this.lvl_select_bg.addChild(this.level2Button);\n        this.lvl_select_bg.addChild(this.level3Button);\n        this.lvl_select_bg.addChild(this.level4Button);\n        this.lvl_select_bg.frameName = \"level_select_bg.png\"\n        this.scoreText = this.theGame.add.bitmapText(10, 100, 'gem','1:00:30',34);\n        this.scoreText.alignIn(this.theGame.camera.view, Phaser.CENTER)\n        this.nextButton = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.next_level, this, 'next_button2.png', 'next_button1.png');\n        this.nextButton.alignIn(this.theGame.camera.view, Phaser.TOP_CENTER)\n        \n\n    }\n\n    level1(){\n        this.startLevel(0)\n    }\n\n    level2(){\n        this.startLevel(1)\n    }\n\n    level3(){\n        this.startLevel(2)\n    }\n\n    level4(){\n        this.startLevel(3)\n    }\n\n    next_level(){\n        console.log('next level')\n        if(this.theGame.theLevel < 4){\n            this.theGame.theLevel = this.theGame.theLevel + 1\n        }\n        if(this.theGame.theLevel === 4){\n            this.theGame.theLevel = 0\n        }\n\n        console.log(this.theGame.theLevel)\n        \n        this.startLevel(this.theGame.theLevel)\n    }\n\n    startLevel(lvl){\n        \n        this.theGame.theLevel = lvl\n        this.theGame.state.start(\"Game\")\n    }\n\n}\n\nexport default LevelComplete\n","import GameMenu from \"./GameMenu\"\nimport Game from \"./Game\"\nimport GameOver from \"./GameOver\"\nimport Credits from \"./Credits\"\nimport Options from \"./Options\"\nimport LevelComplete from \"./LevelComplete\"\n\nclass Boot extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.addedStates = false\n        this.theGame.load.onLoadStart.add(this.loadStart, this);\n        this.theGame.load.onFileComplete.add(this.fileComplete, this);\n        this.theGame.load.onLoadComplete.add(this.loadComplete, this);\n        \n        this.theGame.scale.aspectRatio = 1\n        console.log(this.theGame.scale.aspectRatio)\n        console.log(this.theGame)\n        \n    }\n\n    preload() {\n        this.theGame.load.tilemap('map2', 'assets/images/tilemap_2.json', null, Phaser.Tilemap.TILED_JSON);\n        this.theGame.load.tilemap('map3', 'assets/images/tilemap_3.json', null, Phaser.Tilemap.TILED_JSON);\n        this.theGame.load.image('tiles', './assets/images/tilemap.png');\n        this.theGame.load.atlas('atlas', 'assets/images/atlas.png', 'assets/images/atlas.json');\n        this.theGame.load.image('button_bg', './assets/images/button_background.png');\n        this.theGame.load.image('sky', './assets/images/sky.png');\n        this.theGame.load.image('ground', './assets/images/platform.png');\n        this.theGame.load.image('star', './assets/images/star.png');\n        this.theGame.load.spritesheet('dude', './assets/images/dude.png', 32, 48);\n        this.theGame.load.spritesheet('resumeButton', './assets/pause_menu/resume_button.png', 32, 32);\n        this.theGame.load.spritesheet('pauseButton', './assets/pause_menu/pause_button.png', 32, 32);\n        this.theGame.load.image('menu', './assets/images/number-buttons-90x90.png', 270, 180);\n        this.theGame.load.bitmapFont('carrier_command', 'assets/fonts/carrier_command.png', 'assets/fonts/carrier_command.xml');\n        this.theGame.load.bitmapFont('gem', 'assets/fonts/gem.png', 'assets/fonts/gem.xml');\n        this.theGame.load.spritesheet('menu_start_button', './assets/main_menu/play_button.png', 128, 32)\n        this.theGame.load.image('menu_bg', './assets/main_menu/menu_bg.png')\n    }\n\n    create() {\n\n        this.bmpText = this.theGame.add.bitmapText(10, 100, 'gem','LOADING...',34);\n\n        // bmpText.inputEnabled = true;\n\n        // bmpText.input.enableDrag();\n\n        this.addGameStates();\n        this.addGameMusic();\n\n        //just leaving this here for later, will come in handy maybe\n        //  Register the keys.\n\t    this.leftKey = this.theGame.input.keyboard.addKey(Phaser.Keyboard.LEFT);\n\t    this.rightKey = this.theGame.input.keyboard.addKey(Phaser.Keyboard.RIGHT);\n        this.spaceKey = this.theGame.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n    \n\n        \n    }\n\n    update(){\n\n        if(this.addedStates && this.filesLoaded){\n            this.theGame.state.start(\"GameMenu\");\n            //this.theGame.state.start(\"Game\");\n        }\n\n    }\n\n    addGameStates(){\n     \n        this.theGame.state.add(\"GameMenu\",GameMenu);\n        this.theGame.state.add(\"Game\",Game);\n        this.theGame.state.add(\"GameOver\",GameOver);\n        this.theGame.state.add(\"Credits\",Credits);\n        this.theGame.state.add(\"Options\",Options);\n        this.theGame.state.add(\"LevelComplete\", LevelComplete)\n\n        this.addedStates = true\n\n    }\n    \n    addGameMusic(){\n        // music = game.add.audio('dangerous');\n        // music.loop = true;\n        // music.play();\n    }\n\n    loadStart() {\n\n        console.log('loading')\n    \n    }\n    \n   \n    fileComplete(progress, cacheKey, success, totalLoaded, totalFiles) {\n        //http://phaser.io/examples/v2/loader/load-events\n        // text.setText(\"File Complete: \" + progress + \"% - \" + totalLoaded + \" out of \" + totalFiles);\n        console.log(progress)\n    \n    }\n    \n    loadComplete(){\n        this.filesLoaded = true\n    }\n \n}\n\nexport default Boot","//import Scene1 from './states/Scene1.js';\n// import Preload from 'states/Preload';\n// import GameTitle from 'states/GameTitle';\n// import Main from 'states/Main';\n// import GameOver from 'states/GameOver';\nimport Boot from './states/Boot'\n\nclass Game extends Phaser.Game {\n \n    constructor() {\n \n        super({renderer: Phaser.AUTO,\n            width: 384,\n            height: 384,\n            aspectRatio: 1,\n            crisp: true,\n            roundPixels: true,\n            alignH: true,\n            alignV: true,\n            scaleH: 1,\n            scaleV: 1,\n            trimH: 0,\n            trimV: 0,\n            scaleMode: Phaser.ScaleManager.SHOW_ALL,\n            antialias: true });\n        \n        this.state.add('Boot', Boot, false);\n        this.state.start('Boot');\n    }\n \n}\n \nnew Game();\n    \n\n  \n\n\n\n\n"],"names":["LevelSelect","context","theGame","this","create_level_select","lvl_select_bg","add","sprite","alignIn","camera","view","Phaser","CENTER","level1Button","button","width","height","level1","anchor","setTo","level2Button","level2","level3Button","level3","level4Button","level4","addChild","frameName","startLevel","lvl","log","theLevel","state","start","MainMenu","_width","_height","create_main_menu","levelSelect","GameMenu","game","menu_features","State","Game","w","h","selectedTilesArray","selected","deadEnds","alreadyMatched","currentCell","cycles","done","level","theTileMap","tilemap","addTilesetImage","layer1","createLayer","exists","setLayer","currentLayerIndex","getLayer","currentLayer","input","onDown","getTileProperties","forEach","tile","properties","type","sourceBlock","firstInChain","_this2","getTileRight","x","y","destinationBlock","selector","visible","startCell","left","traversePath","foundMatches","testConnections","push","length","i","includes","theTile","matches","above","getTileAbove","below","getTileBelow","getTileLeft","right","theTileProps","aboveProps","belowProps","leftProps","rightProps","bottom","top","getTileX","activePointer","worldX","getTileY","worldY","getTile","swap","remove_selector","create_selector","tile1","tile1Copy","Tile","tile2","tile2Copy","prop","hasOwnProperty","putTile","checkForRoadStart","bringToTop","z","destroy","_this3","GameOver","Credits","score","cursors","keyboard","createCursorKeys","physics","startSystem","Physics","ARCADE","platforms","group","enableBody","ground","create","world","scale","body","immovable","ledge","player","arcade","enable","bounce","gravity","collideWorldBounds","animations","stars","star","Math","random","scoreText","text","font","fill","align","fixedToCamera","cameraOffset","seeker","allowRotation","pause_menu","setBounds","follow","Camera","FOLLOW_LOCKON","hitPlatform","collide","velocity","isDown","play","stop","frame","up","touching","down","overlap","collectStar","rotation","moveToPointer","debug","phaser","self","paused","pause_button","menu","xPos","yPos","choiceLabel","resume_button","centerX","centerY","event","setFrames","x1","x2","y1","y2","choice","floor","add_pause_button","kill","Options","LevelComplete","completionTime","BOTTOM_CENTER","bitmapText","nextButton","next_level","TOP_CENTER","Boot","addedStates","load","onLoadStart","loadStart","onFileComplete","fileComplete","onLoadComplete","loadComplete","aspectRatio","Tilemap","TILED_JSON","image","atlas","spritesheet","bitmapFont","bmpText","addGameStates","addGameMusic","leftKey","addKey","Keyboard","LEFT","rightKey","RIGHT","spaceKey","SPACEBAR","filesLoaded","progress","cacheKey","success","totalLoaded","totalFiles","renderer","AUTO","ScaleManager","SHOW_ALL"],"mappings":"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"}