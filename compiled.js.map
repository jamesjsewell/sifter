{"version":3,"file":"compiled.js","sources":["states/menus/level_select/level_select.js","states/menus/main/main_menu.js","states/GameMenu.js","states/Game.js","states/GameOver.js","states/Credits.js","states/Options.js","states/LevelComplete.js","states/Boot.js","index.js"],"sourcesContent":["\nclass LevelSelect {\n\n    constructor(context){\n        this.context = context\n        this.theGame = this.context.theGame\n        this.create_level_select()\n    }\n\n    create_level_select(){\n    \n        \n        this.lvl_select_bg = this.theGame.add.sprite(0, 0, 'atlas')\n      \n        this.lvl_select_bg.alignIn(this.theGame.camera.view, Phaser.CENTER)\n        this.level1Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level1, this, 'lvl2.png', 'lvl1.png');\n        this.level1Button.anchor.setTo(0.5)\n        this.level2Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level2, this, 'lvl4.png', 'lvl3.png');\n        this.level2Button.anchor.setTo(-0.8, 0.5)\n        this.level3Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level3, this, 'lvl6.png', 'lvl5.png');\n        this.level3Button.anchor.setTo(-2.1, 0.5)\n        this.level4Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level4, this, 'lvl8.png', 'lvl7.png');\n        this.level4Button.anchor.setTo(-3.4, 0.5)\n        this.lvl_select_bg.addChild(this.level1Button);\n        this.lvl_select_bg.addChild(this.level2Button);\n        this.lvl_select_bg.addChild(this.level3Button);\n        this.lvl_select_bg.addChild(this.level4Button);\n        this.lvl_select_bg.frameName = \"level_select_bg.png\"\n\n\n\n    }\n\n    level1(){\n        this.startLevel(0)\n    }\n    level2(){\n        this.startLevel(1)\n    }\n    level3(){\n        this.startLevel(2)\n    }\n    level4(){\n        this.startLevel(3)\n    }\n    startLevel(lvl){\n        console.log(this)\n        this.theGame.theLevel = lvl\n        this.theGame.state.start(\"Game\")\n    }\n\n}\n\nexport default LevelSelect","import LevelSelect from '../level_select/level_select.js'\n\nclass MainMenu{\n\n    constructor(context){\n        this.context = context\n        this.theGame = this.context.theGame\n        this.width = this.theGame._width\n        this.height = this.theGame._height\n        this.create_main_menu()\n    }\n\n    create_main_menu(){\n\n        // this.button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.startGame, this, 'play_button2.png', 'play_button1.png');\n        // this.button.frameName = \"play_button1.png\"\n        // this.button.x = this.width/2 - (this.button.texture.frame.width/2) \n        // this.button.y = this.height/2 - (this.button.texture.frame.height/2)\n        \n        this.levelSelect = new LevelSelect(this)\n\n        //this.menu_features = new MainMenu(this)\n    }\n\n    startGame(){\n        //console.log('starting game')\n        this.theGame.state.start(\"Game\");\n        \n    }\n\n}\n\nexport default MainMenu","import MainMenu from './menus/main/main_menu'\n\nclass GameMenu extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.width = this.theGame._width\n        this.height = this.theGame._height\n    \n    }\n\n    create() {\n\n        // this.theGame.add.sprite(0, 0, 'menu_bg')\n        // this.button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.startGame, this, 1, 0, 2);\n        // this.button.frameName = \"play_button1.png\"\n        // this.button.x = this.width/2 - (this.button.texture.frame.width/2) \n        // this.button.y = this.height/2 - (this.button.texture.frame.height/2)\n        \n        this.menu_features = new MainMenu(this)\n\n    }\n\n    update() {\n       \n        \n    }\n\n    render(){\n       \n    }\n\n    startGame(){\n        //console.log('starting game')\n        //this.theGame.state.start(\"Game\");\n        \n    }\n \n}\n\nexport default GameMenu","import PauseMenu from './menus/pause/pause_menu.js'\n\nclass Game extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.w = this.theGame.width\n        this.h = this.theGame.height\n        this.selectedTilesArray = []\n        this.selected = false\n        this.deadEnds = []\n        this.alreadyMatched = []\n        this.currentCell = null\n        this.cycles = 0\n        this.done = false\n        this.level = this.theGame.theLevel\n\n        \n    }\n\n    preload() {\n\n        \n    }\n\n    create() {\n    \n        this.theTileMap = this.theGame.add.tilemap('map2')\n        this.theTileMap.addTilesetImage('tiles');\n        this.layer1 = this.theTileMap.createLayer(this.level)\n        this.layer1.exists = true\n        this.theTileMap.setLayer(this.layer1)\n        this.currentLayerIndex = this.theTileMap.getLayer(this.theTileMap.currentLayer)\n\n        //this.layer2 = this.theTileMap.createLayer(1)\n        //this.theTileMap.setLayer(this.layer1)\n        this.currentLayerIndex = this.level\n        console.log(this.currentLayerIndex)\n        \n        //this.layer1.resizeWorld();\n        // this.theTileMap.setPreventRecalculate(true)\n        // this.theTileMap.shuffle(1, 1, 4, 4, this.currentLayerIndex)\n\n        this.theGame.input.onDown.add(this.getTileProperties, this);\n\n        this.theTileMap.forEach((tile)=>{\n            \n            if(tile.properties){\n\n                if(tile.properties.type === \"source\"){\n                    this.sourceBlock = tile\n                    this.firstInChain = this.theTileMap.getTileRight(this.currentLayerIndex, this.sourceBlock.x, this.sourceBlock.y)\n                }\n\n                if(tile.properties.type === \"destination\"){\n                    this.destinationBlock = tile\n                }\n\n            }\n        \n        \n        }, this, 0, 0, 6, 6,this.currentLayerIndex)\n        \n        this.selector = this.theGame.add.sprite(0, 0, 'atlas', this.currentLayerIndex);\n        this.selector.frameName = \"selector.png\"\n        this.selector.visible = false\n\n        this.marker = this.theGame.add.sprite(0, 0, 'atlas', this.currentLayerIndex)\n        this.marker.frameName = \"marker.png\"\n        this.marker.anchor.setTo(0)\n        this.theGame.input.addMoveCallback(this.updateMarker, this);\n\n \n        this.startTime = new Date();\n        this.totalTime = 120;\n        this.timeElapsed = 0;\n    \n        this.createTimer();\n    \n        this.gameTimer = this.theGame.time.events.loop(100, ()=>{this.updateTimer()} );\n\n\n        \n\n\n    }\n\n    update() {\n\n        \n    }\n\n    render(){\n       \n    }\n\n    checkForRoadStart(){\n    \n        var startCell = this.theTileMap.getTileRight(this.currentLayerIndex, this.sourceBlock.x, this.sourceBlock.y)\n       \n        if(startCell){\n            if(startCell.properties.left === true){\n                this.currentCell = null\n                this.alreadyMatched = []\n                this.deadEnds = []\n                this.alreadyMatched[0] = startCell\n                this.cycles = 0\n                this.traversePath(startCell)\n            \n            }\n        }\n    }\n\n    traversePath(currentCell){\n\n        if(this.done === false){\n                \n            var foundMatches = this.testConnections(currentCell, this.alreadyMatched)\n\n            if(this.done === true){\n\n                return\n            }\n            \n            this.cycles = this.cycles + 1\n\n            var foundMatches = this.testConnections(currentCell, this.alreadyMatched)\n            \n            if(!foundMatches){\n             \n                \n                if(!this.deadEnds.includes(currentCell)){\n                    \n                    if(currentCell){\n                        this.deadEnds.push(currentCell)\n                    }\n                    \n                }\n                else{\n                    \n                }\n                \n\n                if(this.cycles < 20){\n\n                    if(this.alreadyMatched.length){\n                        currentCell = this.alreadyMatched[this.alreadyMatched.length]\n                        this.traversePath(currentCell)\n                    }\n                    \n                }\n                else{\n                    console.log('cycle limit reached, dead end')              \n                \n                }\n                \n            }\n            else{\n            \n                this.alreadyMatched.push(currentCell)\n                currentCell = null\n\n                if(foundMatches && foundMatches.length){\n\n                    for(var i = 0; i <= foundMatches.length; i++){\n\n                        if(foundMatches[i]){\n                            currentCell = foundMatches[i]\n                        }\n                    }  \n\n                }\n\n                if(currentCell){\n                   \n                    if(this.cycles < 20){\n                        this.traversePath(currentCell)\n                    }\n                    else{\n                        console.log('cycle limit reached')\n                    }\n                    \n                }\n            \n            }\n        }\n    \n    }\n\n    testConnections(theTile, alreadyMatched){\n\n        var matches = []\n\n        if(theTile && theTile.properties){\n\n\n                    \n            var above = this.theTileMap.getTileAbove(this.currentLayerIndex, theTile.x, theTile.y)\n            var below = this.theTileMap.getTileBelow(this.currentLayerIndex, theTile.x, theTile.y)\n            var left = this.theTileMap.getTileLeft(this.currentLayerIndex, theTile.x, theTile.y)\n            var right = this.theTileMap.getTileRight(this.currentLayerIndex, theTile.x, theTile.y)\n\n            var theTileProps = theTile.properties\n\n            if(above){\n                var aboveProps = above.properties\n            }\n\n            if(below){\n                var belowProps = below.properties\n            }\n\n            if(left){\n                var leftProps = left.properties\n            }\n            \n            if(right){\n                var rightProps = right.properties\n            }\n                    \n            if(aboveProps){\n                if(aboveProps.bottom === true && theTileProps.top === true){\n                    \n                    if(!alreadyMatched.includes(above) && !this.deadEnds.includes(above)){\n                        matches.push(above)\n                        \n                    }  \n                    \n                }\n        \n            }\n\n            if(belowProps){\n\n                if(belowProps.top === true && theTileProps.bottom === true){\n                \n                    if(!alreadyMatched.includes(below) && !this.deadEnds.includes(below)){\n                        matches.push(below)\n                        \n                    }      \n                    \n                }\n        \n            }\n\n            if(leftProps){\n\n                if(leftProps.right === true && theTileProps.left === true){\n                    \n                    if(!alreadyMatched.includes(left) && !this.deadEnds.includes(left)){\n                        matches.push(left)\n            \n                    }  \n\n                }\n\n            }\n\n            if(rightProps){\n                console.log(rightProps)\n                if(rightProps.left === true && theTileProps.right === true){\n\n                    if(!alreadyMatched.includes(right) && !this.deadEnds.includes(right)){\n                        \n                        \n                        \n                        matches.push(right)\n                        \n                        if(rightProps.type === \"destination\"){\n                            console.log('donne')\n                           \n                            this.currentCell = null\n                            this.alreadyMatched = []\n                            \n                            this.cycles = 0\n                            this.done = true\n\n                            //this.level = this.level + 1\n                            \n                            //this.change_level()\n                            this.theGame.state.start(\"LevelComplete\")\n                            return\n                        }\n                    }  \n                    \n                        \n                }\n\n            } \n           \n            if(matches.length){\n                return matches\n            }\n            else{\n                return null\n            } \n        \n        }\n    }\n\n    getTileProperties() {\n\n        var x = this.layer1.getTileX(this.theGame.input.activePointer.worldX);\n        var y = this.layer1.getTileY(this.theGame.input.activePointer.worldY);\n        var tile = this.theTileMap.getTile(x, y);\n\n        if(!this.selectedTilesArray.length){\n            \n            if(tile.properties.type === \"connector\" || tile.properties.type === \"blank\"){\n                this.selectedTilesArray[0] = tile\n                this.selected = true\n            \n                this.create_selector(tile.worldX, tile.worldY)\n                return\n            }\n        }\n        \n        if(this.selected === true){\n            if(!tile){\n                console.log('drop selection')\n            }\n\n            if(tile){\n             \n                if(tile.properties.type === \"connector\" || tile.properties.type === \"blank\"){\n                \n                    this.selectedTilesArray[1] = tile\n                    \n                    this.swap()\n\n                    this.remove_selector()\n\n                    return\n                }\n            }\n        }\n        \n    \n    }\n\n    swap(){\n\n        var tile1 = this.selectedTilesArray[0]\n        var tile1Copy = new Phaser.Tile(this.currentLayerIndex)\n        \n        var tile2 = this.selectedTilesArray[1] \n        var tile2Copy = new Phaser.Tile(this.currentLayerIndex)\n\n        var performSwap = true\n\n        for (var prop in tile2) {\n            if (tile2.hasOwnProperty(prop)) {\n                tile2Copy[prop] = tile2[prop];\n            }\n        }\n\n        for (var prop in tile1) {\n            if (tile1.hasOwnProperty(prop)) {\n                tile1Copy[prop] = tile1[prop];\n            }\n        }\n\n    \n        if(performSwap){\n            \n            this.theTileMap.putTile(tile1, tile2Copy.x, tile2Copy.y, this.currentLayerIndex)\n            this.theTileMap.putTile(tile2Copy, tile1Copy.x, tile1Copy.y, this.currentLayerIndex)\n            this.selectedTilesArray = []\n            this.selected = false\n\n            this.done = false\n            this.checkForRoadStart()\n\n        }\n\n    } \n\n    create_selector(x, y){\n\n        if(this.selector && x && y){\n            this.selector.bringToTop()\n            this.selector.z = 20\n            this.selector.x = x\n            this.selector.y = y\n            this.selector.visible = true\n        }\n\n        else{\n            \n        }\n           \n        \n        \n    }\n    \n    remove_selector(){\n        this.selector.visible = false\n    }\n\n    change_level(){\n\n        this.layer1.destroy()\n\n        this.layer1 = this.theTileMap.createLayer(this.level)\n    \n        this.layer1.exists = true\n        this.theTileMap.setLayer(this.layer1)\n        this.currentLayerIndex = this.theTileMap.getLayer(this.theTileMap.currentLayer)\n        this.selector.bringToTop()\n\n        this.selectedTilesArray = []\n        this.selected = false\n        this.deadEnds = []\n        this.alreadyMatched = []\n        this.currentCell = null\n        this.cycles = 0\n        this.done = false\n    \n\n        this.theTileMap.forEach((tile)=>{\n            \n            if(tile.properties){\n\n                if(tile.properties.type === \"source\"){\n                    this.sourceBlock = tile\n                    this.firstInChain = this.theTileMap.getTileRight(this.currentLayerIndex, this.sourceBlock.x, this.sourceBlock.y)\n                }\n\n                if(tile.properties.type === \"destination\"){\n                    this.destinationBlock = tile\n                }\n\n            }\n        \n        \n        }, this, 0, 0, 6, 6, this.currentLayerIndex)\n\n        console.log(this.sourceBlock)\n    }\n\n    updateMarker() {\n\n        this.marker.x = this.layer1.getTileX(this.theGame.input.activePointer.worldX) * 64;\n        this.marker.y = this.layer1.getTileY(this.theGame.input.activePointer.worldY) * 64;\n    \n    }\n\n    createTimer(){\n        \n        this.timeLabel = this.theGame.add.bitmapText(10, 100, 'gem','00:00',18);\n        this.timeLabel.alignIn(this.theGame.camera.view, Phaser.TOP_RIGHT)\n        this.timeLabel.anchor.setTo(0.5, 0);\n        this.timeLabel.align = 'center';\n        \n     \n    }\n\n    updateTimer(){\n \n        var currentTime = new Date();\n        var timeDifference = this.startTime.getTime() - currentTime.getTime();\n     \n        //Time elapsed in seconds\n        this.timeElapsed = Math.abs(timeDifference / 1000);\n     \n        //Time remaining in seconds\n        var timeRemaining = this.timeElapsed\n     \n        //Convert seconds into minutes and seconds\n        var minutes = Math.floor(timeRemaining / 60);\n        var seconds = Math.floor(timeRemaining) - (60 * minutes);\n     \n        //Display minutes, add a 0 to the start if less than 10\n        var result = (minutes < 10) ? \"0\" + minutes : minutes;\n     \n        //Display seconds, add a 0 to the start if less than 10\n        result += (seconds < 10) ? \":0\" + seconds : \":\" + seconds;\n     \n        this.timeLabel.text = result;\n        this.theGame.score = result\n     \n    }\n \n}\n\nexport default Game\n\n\n\n        \n","class GameOver extends Phaser.State {\n\n    init() {\n        \n    \n    }\n\n    preload() {\n\n        \n    }\n\n    create() {\n\n\n    }\n\n    update() {\n       \n        \n    }\n\n    render(){\n       \n    }\n \n}\n\nexport default GameOver","class Credits extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.score = 0\n    \n    }\n\n    preload() {\n\n    }\n\n    create() {\n        \n        this.cursors = this.theGame.input.keyboard.createCursorKeys();\n        \n        //  We're going to be using physics, so enable the Arcade Physics system\n        this.theGame.physics.startSystem(Phaser.Physics.ARCADE);\n        //  A simple background for our this.theGame\n        this.theGame.add.sprite(0, 0, 'sky');\n        //  The platforms group contains the ground and the 2 ledges we can jump on\n        this.platforms = this.theGame.add.group();\n        //  We will enable physics for any object that is created in group\n        this.platforms.enableBody = true;\n        // Here we create the ground.\n        this.ground = this.platforms.create(0, this.theGame.world.height - 64, 'ground');\n        //  Scale it to fit the width of the this.theGame (the original sprite is 400x32 in size)\n        this.ground.scale.setTo(2, 2);\n        //  This stops it from falling away when you jump on it\n        this.ground.body.immovable = true;\n        //  Now let's create two ledges\n        this.ledge = this.platforms.create(400, 480, 'ground');\n        this.ledge.body.immovable = true;\n        this.ledge = this.platforms.create(-100, 440, 'ground');\n        this.ledge.body.immovable = true;\n        this.ledge = this.platforms.create(200, 400, 'ground');\n        this.ledge.scale.setTo(.2,.5)\n        this.ledge.body.immovable = true;\n        // ready player one\n        // The player and its settings\n        this.player = this.theGame.add.sprite(32, this.theGame.world.height - 150, 'dude');\n        //  We need to enable physics on the player\n        this.theGame.physics.arcade.enable(this.player);\n        //  Player physics properties. Give the little guy a slight bounce.\n        this.player.body.bounce.y = 0.2;\n        this.player.body.gravity.y = 900;\n        this.player.body.collideWorldBounds = true;\n        //  Our two animations, walking left and right.\n        this.player.animations.add('left', [0, 1, 2, 3], 10, true);\n        this.player.animations.add('right', [5, 6, 7, 8], 10, true);\n        //add some stars\n        this.stars = this.theGame.add.group();\n        this.stars.enableBody = true;\n\n        //  Here we'll create 12 of them evenly spaced apart\n        for (var i = 0; i < 12; i++)\n        {\n            //  Create a star inside of the 'stars' group\n            var star = this.stars.create(i * 70, 0, 'star');\n            //  Let gravity do its thing\n            star.body.gravity.y = 900;\n            //  This just gives each star a slightly random bounce value\n            star.body.bounce.y = 0.7 + Math.random() * 0.2;\n        }\n        //gui\n        this.scoreText = this.theGame.add.text(650, 0, \"score: 0\", { font: \"18px Arial\", fill: \"#ffffff\", align: \"right\" });\n        this.scoreText.fixedToCamera = true;\n        this.scoreText.cameraOffset.setTo(650, 0);\n        \n\n        //move sprite to cursor\n        this.seeker = this.theGame.add.sprite(400, 300, '../assets/images/diamond.png');\n        this.seeker.anchor.setTo(0.5, 0.5);\n\n        //  Enable Arcade Physics for the sprite\n        this.theGame.physics.enable(this.seeker, Phaser.Physics.ARCADE);\n\n        //  Tell it we don't want physics to manage the rotation\n        this.seeker.body.allowRotation = false;\n\n        //pause menu\n        this.pause_menu()\n\n    }\n\n    update() {\n        this.theGame.world.setBounds(0, 0, 1920, 1920);\n        //  Notice that the sprite doesn't have any momentum at all,\n        //  it's all just set by the camera follow type.\n        //  0.1 is the amount of linear interpolation to use.\n        //  The smaller the value, the smooth the camera (and the longer it takes to catch up)\n        this.theGame.camera.follow(this.player, Phaser.Camera.FOLLOW_LOCKON, 0.1, 0.1);\n        //  Collide the player and the stars with the this.platforms\n        var hitPlatform = this.theGame.physics.arcade.collide(this.player, this.platforms);\n        //  Reset the players velocity (movement)\n        this.player.body.velocity.x = 0;\n        if (this.cursors.left.isDown)\n        {\n            //  Move to the left\n            this.player.body.velocity.x = -150;\n            this.player.animations.play('left');\n        }\n        else if (this.cursors.right.isDown)\n        {\n            //  Move to the right\n            this.player.body.velocity.x = 150;\n            this.player.animations.play('right');\n        }\n        else\n        {\n            //  Stand still\n            this.player.animations.stop();\n            this.player.frame = 4;\n        }\n        //  Allow the player to jump if they are touching the ground.\n        if (this.cursors.up.isDown && this.player.body.touching.down && hitPlatform)\n        {\n            this.player.body.velocity.y = -350;\n        }\n        //stars\n        this.theGame.physics.arcade.collide(this.stars, this.platforms);\n        this.theGame.physics.arcade.overlap(this.player, this.stars, this.collectStar, null, this);\n\n        //seeker\n        this.seeker.rotation = this.theGame.physics.arcade.moveToPointer(this.seeker, 60, this.theGame.input.activePointer, 500);\n        \n    }\n\n    render(){\n        var debug = this.theGame.debug;\n        debug.scale(20, 20, '#fff');\n        debug.phaser(10, 580);\n    }\n\n    pause_menu(){\n\n        //pause menu\n        var w = 800, h = 600;\n        \n        add_pause_button(this)\n\n        console.log(this.theGame)\n\n        var self = this\n\n        function paused(){\n\n            // When the paus button is pressed, we pause the this.theGame\n            self.theGame.paused = true;\n            self.pause_button.destroy();\n            // Then add the menu\n            self.menu = self.theGame.add.sprite(w/2, h/2, 'menu');\n            var xPos = self.theGame.camera.x\n            var yPos = self.theGame.camera.y\n\n            // And a label to illustrate which menu item was chosen. (self is not necessary)\n            self.choiceLabel = self.theGame.add.text(w/2, h-150, 'Click outside menu to continue', { font: '30px Arial', fill: '#fff' });\n            self.menu.x = xPos + w/2 - ( 270/2 )\n            self.menu.y = yPos + h/2 - ( 180/2 )\n\n            self.menu.x = self.theGame.camera.x + w/2 - ( 270/2 )\n            self.menu.y = self.theGame.camera.y + h/2 - ( 180/2 )\n\n            self.choiceLabel.x = self.menu.x \n            self.choiceLabel.y = self.menu.y + h/3.5\n\n            self.resume_button = self.theGame.add.button(self.theGame.world.centerX, self.theGame.world.centerY, 'resumeButton', unpause, self, 1, 0, 2);\n            self.resume_button.x = xPos + w/2 - 32\n            self.resume_button.y = yPos + 20\n\n\n            self.theGame.input.onDown.add(menuClick, self);\n            // And finally the method that handels the pause menu\n        \n            function menuClick(event){\n                \n                // Only act if paused\n                if(self.theGame.paused){\n                    // Calculate the corners of the menu\n                    var x1 = w/2 - 270/2, x2 = w/2 + 270/2,\n                        y1 = h/2 - 180/2, y2 = h/2 + 180/2;\n                    // Check if the click was inside the menu\n                    if(event.x > x1 && event.x < x2 && event.y > y1 && event.y < y2 ){\n                        // The choicemap is an array that will help us see which item was clicked\n                        var choiceMap = ['one', 'two', 'three', 'four', 'five', 'six'];\n                        // Get menu local coordinates for the click\n                        var x = event.x - x1,\n                            y = event.y - y1;\n                        // Calculate the choice \n                        var choice = Math.floor(x / 90) + 3*Math.floor(y / 90);\n                        // Display the choice\n                        self.choiceLabel.text = 'You chose menu item: ' + choiceMap[choice];\n                        \n                    }\n                \n                }\n            }\n            \n            function unpause(event){\n                \n                self.resume_button.setFrames(0, 1, 2);\n                // Only act if paused\n                if(self.theGame.paused){\n\n                    // Remove the menu and the label\n                    self.menu.destroy();\n                    self.choiceLabel.destroy();\n                    self.resume_button.destroy();\n                    self.theGame.paused = false;\n                    add_pause_button(self)\n                                    \n                }\n        \n            } \n            \n        }\n\n        function add_pause_button(self){\n            \n            self.pause_button = self.theGame.add.button(self.theGame.world.centerX, self.theGame.world.centerY, 'pauseButton', paused, this, 1, 0, 2)\n            self.pause_button.fixedToCamera = true\n            self.pause_button.cameraOffset.setTo(w/2-32, 20);\n        }\n    }\n\n    collectStar(player, star) {\n        // Removes the star from the screen\n        star.kill();\n        //  Add and update the score\n        this.score += 10;\n        console.log(this.score)\n        this.scoreText.text = 'score: ' + this.score;\n    }\n \n}\n\nexport default Credits","class Options extends Phaser.State {\n\n    init() {\n        \n    \n    }\n\n    preload() {\n\n        \n    }\n\n    create() {\n\n\n    }\n\n    update() {\n       \n        \n    }\n\n    render(){\n       \n    }\n \n}\n\nexport default Options","class LevelComplete extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.score = this.theGame.completionTime\n    }\n\n    preload() {\n\n        \n    }\n\n    create() {\n\n        \n        this.lvl_select_bg = this.theGame.add.sprite(0, 0, 'atlas')\n        this.lvl_select_bg.alignIn(this.theGame.camera.view, Phaser.BOTTOM_CENTER)\n        this.level1Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level1, this, 'lvl2.png', 'lvl1.png');\n        this.level1Button.anchor.setTo(0.5)\n        this.level2Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level2, this, 'lvl4.png', 'lvl3.png');\n        this.level2Button.anchor.setTo(-0.8, 0.5)\n        this.level3Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level3, this, 'lvl6.png', 'lvl5.png');\n        this.level3Button.anchor.setTo(-2.1, 0.5)\n        this.level4Button = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.level4, this, 'lvl8.png', 'lvl7.png');\n        this.level4Button.anchor.setTo(-3.4, 0.5)\n        this.lvl_select_bg.addChild(this.level1Button);\n        this.lvl_select_bg.addChild(this.level2Button);\n        this.lvl_select_bg.addChild(this.level3Button);\n        this.lvl_select_bg.addChild(this.level4Button);\n        this.lvl_select_bg.frameName = \"level_select_bg.png\"\n        this.scoreText = this.theGame.add.bitmapText(10, 100, 'gem','00:00',42);\n        this.scoreText.text = this.theGame.score\n        this.scoreText.alignIn(this.theGame.camera.view, Phaser.CENTER)\n        this.nextButton = this.theGame.add.button(this.width/2, this.height/2, \"atlas\", this.next_level, this, 'next_button2.png', 'next_button1.png');\n        this.nextButton.alignIn(this.theGame.camera.view, Phaser.TOP_CENTER)\n        \n\n    }\n\n    level1(){\n        this.startLevel(0)\n    }\n\n    level2(){\n        this.startLevel(1)\n    }\n\n    level3(){\n        this.startLevel(2)\n    }\n\n    level4(){\n        this.startLevel(3)\n    }\n\n    next_level(){\n        console.log('next level')\n        if(this.theGame.theLevel < 4){\n            this.theGame.theLevel = this.theGame.theLevel + 1\n        }\n        if(this.theGame.theLevel === 4){\n            this.theGame.theLevel = 0\n        }\n\n        console.log(this.theGame.theLevel)\n        \n        this.startLevel(this.theGame.theLevel)\n    }\n\n    startLevel(lvl){\n        \n        this.theGame.theLevel = lvl\n        this.theGame.state.start(\"Game\")\n    }\n\n}\n\nexport default LevelComplete\n","import GameMenu from \"./GameMenu\"\nimport Game from \"./Game\"\nimport GameOver from \"./GameOver\"\nimport Credits from \"./Credits\"\nimport Options from \"./Options\"\nimport LevelComplete from \"./LevelComplete\"\n\nclass Boot extends Phaser.State {\n\n    init() {\n        this.theGame = this.game.state.game\n        this.addedStates = false\n        this.theGame.load.onLoadStart.add(this.loadStart, this);\n        this.theGame.load.onFileComplete.add(this.fileComplete, this);\n        this.theGame.load.onLoadComplete.add(this.loadComplete, this);\n        \n        this.theGame.scale.aspectRatio = 1\n        console.log(this.theGame.scale.aspectRatio)\n        console.log(this.theGame)\n        \n    }\n\n    preload() {\n        this.theGame.load.tilemap('map2', 'assets/images/tilemap_2.json', null, Phaser.Tilemap.TILED_JSON);\n        this.theGame.load.tilemap('map3', 'assets/images/tilemap_3.json', null, Phaser.Tilemap.TILED_JSON);\n        this.theGame.load.image('tiles', './assets/images/tilemap.png');\n        this.theGame.load.atlas('atlas', 'assets/images/atlas.png', 'assets/images/atlas.json');\n        this.theGame.load.image('button_bg', './assets/images/button_background.png');\n        this.theGame.load.image('sky', './assets/images/sky.png');\n        this.theGame.load.image('ground', './assets/images/platform.png');\n        this.theGame.load.image('star', './assets/images/star.png');\n        this.theGame.load.spritesheet('dude', './assets/images/dude.png', 32, 48);\n        this.theGame.load.spritesheet('resumeButton', './assets/pause_menu/resume_button.png', 32, 32);\n        this.theGame.load.spritesheet('pauseButton', './assets/pause_menu/pause_button.png', 32, 32);\n        this.theGame.load.image('menu', './assets/images/number-buttons-90x90.png', 270, 180);\n        this.theGame.load.bitmapFont('carrier_command', 'assets/fonts/carrier_command.png', 'assets/fonts/carrier_command.xml');\n        this.theGame.load.bitmapFont('gem', 'assets/fonts/gem.png', 'assets/fonts/gem.xml');\n        this.theGame.load.spritesheet('menu_start_button', './assets/main_menu/play_button.png', 128, 32)\n        this.theGame.load.image('menu_bg', './assets/main_menu/menu_bg.png')\n    }\n\n    create() {\n\n        this.bmpText = this.theGame.add.bitmapText(10, 100, 'gem','LOADING...',34);\n\n        // bmpText.inputEnabled = true;\n\n        // bmpText.input.enableDrag();\n\n        this.addGameStates();\n        this.addGameMusic();\n\n        //just leaving this here for later, will come in handy maybe\n        //  Register the keys.\n\t    this.leftKey = this.theGame.input.keyboard.addKey(Phaser.Keyboard.LEFT);\n\t    this.rightKey = this.theGame.input.keyboard.addKey(Phaser.Keyboard.RIGHT);\n        this.spaceKey = this.theGame.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n    \n\n        \n    }\n\n    update(){\n\n        if(this.addedStates && this.filesLoaded){\n            this.theGame.state.start(\"GameMenu\");\n            //this.theGame.state.start(\"Game\");\n        }\n\n    }\n\n    addGameStates(){\n     \n        this.theGame.state.add(\"GameMenu\",GameMenu);\n        this.theGame.state.add(\"Game\",Game);\n        this.theGame.state.add(\"GameOver\",GameOver);\n        this.theGame.state.add(\"Credits\",Credits);\n        this.theGame.state.add(\"Options\",Options);\n        this.theGame.state.add(\"LevelComplete\", LevelComplete)\n\n        this.addedStates = true\n\n    }\n    \n    addGameMusic(){\n        // music = game.add.audio('dangerous');\n        // music.loop = true;\n        // music.play();\n    }\n\n    loadStart() {\n\n        console.log('loading')\n    \n    }\n    \n   \n    fileComplete(progress, cacheKey, success, totalLoaded, totalFiles) {\n        //http://phaser.io/examples/v2/loader/load-events\n        // text.setText(\"File Complete: \" + progress + \"% - \" + totalLoaded + \" out of \" + totalFiles);\n        console.log(progress)\n    \n    }\n    \n    loadComplete(){\n        this.filesLoaded = true\n    }\n \n}\n\nexport default Boot","//import Scene1 from './states/Scene1.js';\n// import Preload from 'states/Preload';\n// import GameTitle from 'states/GameTitle';\n// import Main from 'states/Main';\n// import GameOver from 'states/GameOver';\nimport Boot from './states/Boot'\n\nclass Game extends Phaser.Game {\n \n    constructor() {\n \n        super({renderer: Phaser.AUTO,\n            width: 384,\n            height: 384,\n            aspectRatio: 1,\n            crisp: true,\n            roundPixels: true,\n            alignH: true,\n            alignV: true,\n            scaleH: 1,\n            scaleV: 1,\n            trimH: 0,\n            trimV: 0,\n            scaleMode: Phaser.ScaleManager.SHOW_ALL,\n            antialias: true });\n        \n        this.state.add('Boot', Boot, false);\n        this.state.start('Boot');\n    }\n \n}\n \nnew Game();\n    \n\n  \n\n\n\n\n"],"names":["LevelSelect","context","theGame","this","create_level_select","lvl_select_bg","add","sprite","alignIn","camera","view","Phaser","CENTER","level1Button","button","width","height","level1","anchor","setTo","level2Button","level2","level3Button","level3","level4Button","level4","addChild","frameName","startLevel","lvl","log","theLevel","state","start","MainMenu","_width","_height","create_main_menu","levelSelect","GameMenu","game","menu_features","State","Game","w","h","selectedTilesArray","selected","deadEnds","alreadyMatched","currentCell","cycles","done","level","theTileMap","tilemap","addTilesetImage","layer1","createLayer","exists","setLayer","currentLayerIndex","getLayer","currentLayer","input","onDown","getTileProperties","forEach","tile","properties","type","sourceBlock","firstInChain","_this2","getTileRight","x","y","destinationBlock","selector","visible","marker","addMoveCallback","updateMarker","startTime","Date","totalTime","timeElapsed","createTimer","gameTimer","time","events","loop","updateTimer","startCell","left","traversePath","foundMatches","testConnections","push","length","i","includes","theTile","matches","above","getTileAbove","below","getTileBelow","getTileLeft","right","theTileProps","aboveProps","belowProps","leftProps","rightProps","bottom","top","getTileX","activePointer","worldX","getTileY","worldY","getTile","swap","remove_selector","create_selector","tile1","tile1Copy","Tile","tile2","tile2Copy","prop","hasOwnProperty","putTile","checkForRoadStart","bringToTop","z","destroy","_this3","timeLabel","bitmapText","TOP_RIGHT","align","currentTime","timeDifference","getTime","Math","abs","timeRemaining","minutes","floor","seconds","result","text","score","GameOver","Credits","cursors","keyboard","createCursorKeys","physics","startSystem","Physics","ARCADE","platforms","group","enableBody","ground","create","world","scale","body","immovable","ledge","player","arcade","enable","bounce","gravity","collideWorldBounds","animations","stars","star","random","scoreText","font","fill","fixedToCamera","cameraOffset","seeker","allowRotation","pause_menu","setBounds","follow","Camera","FOLLOW_LOCKON","hitPlatform","collide","velocity","isDown","play","stop","frame","up","touching","down","overlap","collectStar","rotation","moveToPointer","debug","phaser","self","paused","pause_button","menu","xPos","yPos","choiceLabel","resume_button","centerX","centerY","event","setFrames","x1","x2","y1","y2","choice","add_pause_button","kill","Options","LevelComplete","completionTime","BOTTOM_CENTER","nextButton","next_level","TOP_CENTER","Boot","addedStates","load","onLoadStart","loadStart","onFileComplete","fileComplete","onLoadComplete","loadComplete","aspectRatio","Tilemap","TILED_JSON","image","atlas","spritesheet","bitmapFont","bmpText","addGameStates","addGameMusic","leftKey","addKey","Keyboard","LEFT","rightKey","RIGHT","spaceKey","SPACEBAR","filesLoaded","progress","cacheKey","success","totalLoaded","totalFiles","renderer","AUTO","ScaleManager","SHOW_ALL"],"mappings":"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"}